//
//  SHMenuAdminTransloaditManager.m
//  SpotHopper
//
//  Created by Brennan Stehling on 10/31/14.
//  Copyright (c) 2014 SpotHopper. All rights reserved.
//

#import "SHMenuAdminTransloaditManager.h"

#import "SHAppConfiguration.h"

#import "Transloadit.h"
#import "Step.h"
#import "AssemblyBuilder.h"
#import "TransloaditResponse.h"

typedef enum {
    TransloaditTemplateNone = 0,
    TransloaditTemplateSpots,
    TransloaditTemplateDrinks,
    TransloaditTemplateUsers,
    TransloaditTemplateSpecials
} TransloaditTemplate;

@implementation SHMenuAdminTransloaditManager

- (void)uploadSpotImageToTransloadit:(UIImage*)image withCompletionBlock:(void (^)(NSString *path, NSError *error))completionBlock {
    [self uploadImageToTransloadit:image template:TransloaditTemplateSpots withCompletionBlock:completionBlock];
}

- (void)uploadDrinkImageToTransloadit:(UIImage*)image withCompletionBlock:(void (^)(NSString *path, NSError *error))completionBlock {
    [self uploadImageToTransloadit:image template:TransloaditTemplateDrinks withCompletionBlock:completionBlock];
}

- (void)uploadUserImageToTransloadit:(UIImage*)image withCompletionBlock:(void (^)(NSString *path, NSError *error))completionBlock {
    [self uploadImageToTransloadit:image template:TransloaditTemplateUsers withCompletionBlock:completionBlock];
}

- (void)uploadSpecialImageToTransloadit:(UIImage*)image withCompletionBlock:(void (^)(NSString *path, NSError *error))completionBlock {
    [self uploadImageToTransloadit:image template:TransloaditTemplateSpecials withCompletionBlock:completionBlock];
}

- (void)uploadImageToTransloadit:(UIImage*)image template:(TransloaditTemplate)template withCompletionBlock:(void (^)(NSString *path, NSError *error))completionBlock {
    if (!completionBlock) {
        return;
    }
    
    //Create Transloadit instance
    NSObject<ITransloadit> *transloadit = [[Transloadit alloc] init:[SHAppConfiguration transloaditAPIKey]];
    
    //Create assembly builder to build up the assembly
    NSObject<IAssemblyBuilder> *assembly = [[AssemblyBuilder alloc] init];
    
    //Set template ID
    NSString *templateID = nil;
    NSString *prefix = nil;
    switch (template) {
        case TransloaditTemplateSpots:
            templateID = [SHAppConfiguration transloaditSpotsTemplate];
            prefix = @"spots";
            break;
            
        case TransloaditTemplateDrinks:
            templateID = [SHAppConfiguration transloaditDrinksTemplate];
            prefix = @"drinks";
            break;
            
        case TransloaditTemplateSpecials:
            templateID = [SHAppConfiguration transloaditSpecialsTemplate];
            prefix = @"specials";
            break;
            
        case TransloaditTemplateUsers:
            templateID = [SHAppConfiguration transloaditUsersTemplate];
            prefix = @"users";
            break;
            
        default:
            break;
    }
    [assembly setTemplateID:templateID];
    
    NSError *error = nil;
    
    NSData *imageData = UIImagePNGRepresentation(image);
    
    //Add a file to be uploaded with autogenerated key
    [assembly addFile:imageData withError:error];
    
    if (error) {
        completionBlock(nil, error);
    }
    else {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
           TransloaditResponse *response = [transloadit invokeAssembly:assembly withError:error];
            
            if (error) {
                // return to main queue
                dispatch_async(dispatch_get_main_queue(), ^{
                    completionBlock(nil, error);
                });
            }
            else if ([response isSuccess]) {
                NSDictionary *uploads = [[[response getData] objectForKey:@"uploads"] firstObject];
                NSString *value = uploads[@"original_id"];
                NSMutableString *originalID = [NSMutableString stringWithString:value];
                [originalID insertString:@"/" atIndex:2];
                
                BOOL isStaging = [SHAppConfiguration isStaging];
                NSString *pathToPost = [NSString stringWithFormat:@"%@%@/%@", isStaging ? @"staging/" : @"", prefix, originalID];
                
                // return to main queue
                dispatch_async(dispatch_get_main_queue(), ^{
                    completionBlock(pathToPost, nil);
                });
            }
            else {
                NSDictionary *userInfo = @{NSLocalizedDescriptionKey : @"Unable to upload photo"};
                NSError *error = [NSError errorWithDomain:@"Photo Upload" code:101 userInfo:userInfo];

                // return to main queue
                dispatch_async(dispatch_get_main_queue(), ^{
                    completionBlock(nil, error);
                });
            }
        });
    }
}

@end
