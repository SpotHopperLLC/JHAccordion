//
//  SHStyleKit.m
//  SpotHopper
//
//  Created by SpotHopper on 5/16/14.
//  Copyright (c) 2014 SpotHopper. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "SHStyleKit.h"


@implementation SHStyleKit

#pragma mark Cache

static UIColor* _myTintColor = nil;
static UIColor* _myTintColorTransparent = nil;
static UIColor* _myTextColor = nil;
static UIColor* _myWhiteColor = nil;
static UIColor* _myLightHeaderColor = nil;
static UIColor* _myClearColor = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _myTintColor = [UIColor colorWithRed: 0.878 green: 0.4 blue: 0.149 alpha: 1];
    _myTintColorTransparent = [SHStyleKit.myTintColor colorWithAlphaComponent: 0.8];
    _myTextColor = [UIColor colorWithRed: 0.4 green: 0.4 blue: 0.4 alpha: 1];
    _myWhiteColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _myLightHeaderColor = [UIColor colorWithRed: 0.992 green: 0.969 blue: 0.945 alpha: 1];
    _myClearColor = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)myTintColor { return _myTintColor; }
+ (UIColor*)myTintColorTransparent { return _myTintColorTransparent; }
+ (UIColor*)myTextColor { return _myTextColor; }
+ (UIColor*)myWhiteColor { return _myWhiteColor; }
+ (UIColor*)myLightHeaderColor { return _myLightHeaderColor; }
+ (UIColor*)myClearColor { return _myClearColor; }

#pragma mark Drawing Methods

+ (void)drawWineIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 240.7, 0);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(44.9, 207.6)];
        [bezierPath addLineToPoint: CGPointMake(518.9, 207.6)];
        [bezierPath addLineToPoint: CGPointMake(44.9, 207.6)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(491.8, 54.3)];
        [bezierPath addLineToPoint: CGPointMake(56.8, 54.3)];
        [bezierPath addCurveToPoint: CGPointMake(72.52, 194) controlPoint1: CGPointMake(59.88, 105.59) controlPoint2: CGPointMake(65.12, 152.16)];
        [bezierPath addLineToPoint: CGPointMake(484.83, 194)];
        [bezierPath addCurveToPoint: CGPointMake(491.8, 54.3) controlPoint1: CGPointMake(489.47, 152.11) controlPoint2: CGPointMake(491.8, 105.52)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(481.41, 221.1)];
        [bezierPath addLineToPoint: CGPointMake(77.75, 221.1)];
        [bezierPath addCurveToPoint: CGPointMake(286.1, 468.8) controlPoint1: CGPointMake(111.78, 383.06) controlPoint2: CGPointMake(181.54, 466.18)];
        [bezierPath addCurveToPoint: CGPointMake(400.5, 425.6) controlPoint1: CGPointMake(332.9, 469.8) controlPoint2: CGPointMake(370.4, 455.5)];
        [bezierPath addCurveToPoint: CGPointMake(481.41, 221.1) controlPoint1: CGPointMake(440.72, 385.51) controlPoint2: CGPointMake(467.77, 317.02)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(283.3, 920.7)];
        [bezierPath addCurveToPoint: CGPointMake(230.6, 969.7) controlPoint1: CGPointMake(268.7, 939) controlPoint2: CGPointMake(251.1, 955.4)];
        [bezierPath addLineToPoint: CGPointMake(332.2, 969.7)];
        [bezierPath addCurveToPoint: CGPointMake(283.3, 920.7) controlPoint1: CGPointMake(312.5, 955.4) controlPoint2: CGPointMake(296.2, 939)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(545.4, 0)];
        [bezierPath addCurveToPoint: CGPointMake(545.8, 26.7) controlPoint1: CGPointMake(545.4, 0) controlPoint2: CGPointMake(545.8, 26.7)];
        [bezierPath addCurveToPoint: CGPointMake(438.7, 464) controlPoint1: CGPointMake(549.1, 245.9) controlPoint2: CGPointMake(514.1, 388.9)];
        [bezierPath addCurveToPoint: CGPointMake(312.6, 522.1) controlPoint1: CGPointMake(404.4, 498.1) controlPoint2: CGPointMake(362.1, 517.6)];
        [bezierPath addLineToPoint: CGPointMake(312.6, 861.9)];
        [bezierPath addCurveToPoint: CGPointMake(425.9, 958) controlPoint1: CGPointMake(329.6, 904.6) controlPoint2: CGPointMake(366.7, 936.1)];
        [bezierPath addCurveToPoint: CGPointMake(447.7, 996) controlPoint1: CGPointMake(441.4, 963.8) controlPoint2: CGPointMake(450.6, 979.8)];
        [bezierPath addCurveToPoint: CGPointMake(414.2, 1024) controlPoint1: CGPointMake(444.8, 1012.2) controlPoint2: CGPointMake(430.7, 1024)];
        [bezierPath addLineToPoint: CGPointMake(141.5, 1024)];
        [bezierPath addCurveToPoint: CGPointMake(109.1, 996.8) controlPoint1: CGPointMake(125.5, 1024) controlPoint2: CGPointMake(111.9, 1012.6)];
        [bezierPath addCurveToPoint: CGPointMake(130.3, 960.2) controlPoint1: CGPointMake(106.3, 981) controlPoint2: CGPointMake(115.3, 965.6)];
        [bezierPath addCurveToPoint: CGPointMake(258.4, 860.4) controlPoint1: CGPointMake(192.7, 937.7) controlPoint2: CGPointMake(234.7, 905)];
        [bezierPath addLineToPoint: CGPointMake(258.4, 521)];
        [bezierPath addCurveToPoint: CGPointMake(1.2, 28.3) controlPoint1: CGPointMake(101, 501.1) controlPoint2: CGPointMake(14.5, 335.5)];
        [bezierPath addLineToPoint: CGPointMake(0, 0)];
        [bezierPath addLineToPoint: CGPointMake(545.4, 0)];
        [bezierPath addLineToPoint: CGPointMake(545.4, 0)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSpecialsIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 51.35, 2.19);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Dollar Sign Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 464.63, 478.69);
        CGContextRotateCTM(context, 35.99 * M_PI / 180);

        CGRect dollarSignRect = CGRectMake(-117.02, -189.62, 234.04, 379.25);
        NSMutableParagraphStyle* dollarSignStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        dollarSignStyle.alignment = NSTextAlignmentLeft;

        NSDictionary* dollarSignFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"MyriadPro-Bold" size: 408.65], NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: dollarSignStyle};

        [@"$" drawInRect: dollarSignRect withAttributes: dollarSignFontAttributes];

        CGContextRestoreGState(context);


        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(663.35, 252.41)];
        [bezierPath addCurveToPoint: CGPointMake(634.15, 243.81) controlPoint1: CGPointMake(652.95, 252.41) controlPoint2: CGPointMake(642.85, 249.41)];
        [bezierPath addCurveToPoint: CGPointMake(610.65, 209.91) controlPoint1: CGPointMake(622.05, 236.01) controlPoint2: CGPointMake(613.65, 223.91)];
        [bezierPath addCurveToPoint: CGPointMake(618.05, 169.31) controlPoint1: CGPointMake(607.65, 195.81) controlPoint2: CGPointMake(610.25, 181.41)];
        [bezierPath addCurveToPoint: CGPointMake(663.45, 144.61) controlPoint1: CGPointMake(628.05, 153.81) controlPoint2: CGPointMake(644.95, 144.61)];
        [bezierPath addCurveToPoint: CGPointMake(692.65, 153.21) controlPoint1: CGPointMake(673.85, 144.61) controlPoint2: CGPointMake(683.95, 147.61)];
        [bezierPath addCurveToPoint: CGPointMake(708.75, 227.81) controlPoint1: CGPointMake(717.65, 169.31) controlPoint2: CGPointMake(724.85, 202.81)];
        [bezierPath addCurveToPoint: CGPointMake(663.35, 252.41) controlPoint1: CGPointMake(698.75, 243.21) controlPoint2: CGPointMake(681.85, 252.41)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(663.45, 167.91)];
        [bezierPath addCurveToPoint: CGPointMake(637.75, 181.91) controlPoint1: CGPointMake(653.05, 167.91) controlPoint2: CGPointMake(643.45, 173.11)];
        [bezierPath addCurveToPoint: CGPointMake(633.55, 204.91) controlPoint1: CGPointMake(633.35, 188.81) controlPoint2: CGPointMake(631.85, 196.91)];
        [bezierPath addCurveToPoint: CGPointMake(646.85, 224.11) controlPoint1: CGPointMake(635.25, 212.91) controlPoint2: CGPointMake(639.95, 219.71)];
        [bezierPath addCurveToPoint: CGPointMake(689.05, 215.01) controlPoint1: CGPointMake(660.65, 233.01) controlPoint2: CGPointMake(680.25, 228.61)];
        [bezierPath addCurveToPoint: CGPointMake(679.95, 172.81) controlPoint1: CGPointMake(698.15, 200.91) controlPoint2: CGPointMake(694.05, 181.91)];
        [bezierPath addCurveToPoint: CGPointMake(663.45, 167.91) controlPoint1: CGPointMake(675.05, 169.61) controlPoint2: CGPointMake(669.35, 167.91)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(447.75, 1019.01)];
        [bezierPath addCurveToPoint: CGPointMake(398.75, 989.51) controlPoint1: CGPointMake(427.15, 1019.01) controlPoint2: CGPointMake(408.35, 1007.71)];
        [bezierPath addLineToPoint: CGPointMake(288.15, 780.51)];
        [bezierPath addLineToPoint: CGPointMake(52.05, 766.11)];
        [bezierPath addCurveToPoint: CGPointMake(6.05, 735.81) controlPoint1: CGPointMake(32.25, 764.81) controlPoint2: CGPointMake(15.05, 753.51)];
        [bezierPath addCurveToPoint: CGPointMake(8.95, 680.71) controlPoint1: CGPointMake(-2.95, 718.01) controlPoint2: CGPointMake(-1.85, 697.51)];
        [bezierPath addLineToPoint: CGPointMake(413.65, 53.01)];
        [bezierPath addCurveToPoint: CGPointMake(464.55, 22.51) controlPoint1: CGPointMake(424.85, 35.61) controlPoint2: CGPointMake(443.95, 24.21)];
        [bezierPath addLineToPoint: CGPointMake(742.85, 0.21)];
        [bezierPath addCurveToPoint: CGPointMake(811.15, 44.31) controlPoint1: CGPointMake(772.95, -2.19) controlPoint2: CGPointMake(801.05, 16.11)];
        [bezierPath addLineToPoint: CGPointMake(905.65, 307.11)];
        [bezierPath addCurveToPoint: CGPointMake(898.95, 366.01) controlPoint1: CGPointMake(912.65, 326.61) controlPoint2: CGPointMake(910.15, 348.61)];
        [bezierPath addLineToPoint: CGPointMake(494.35, 993.61)];
        [bezierPath addCurveToPoint: CGPointMake(447.75, 1019.01) controlPoint1: CGPointMake(484.05, 1009.51) controlPoint2: CGPointMake(466.65, 1019.01)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(748.25, 46.91)];
        [bezierPath addCurveToPoint: CGPointMake(746.65, 47.01) controlPoint1: CGPointMake(747.75, 46.91) controlPoint2: CGPointMake(747.15, 46.91)];
        [bezierPath addLineToPoint: CGPointMake(468.25, 69.31)];
        [bezierPath addCurveToPoint: CGPointMake(452.95, 78.41) controlPoint1: CGPointMake(462.05, 69.81) controlPoint2: CGPointMake(456.35, 73.21)];
        [bezierPath addLineToPoint: CGPointMake(48.35, 706.11)];
        [bezierPath addCurveToPoint: CGPointMake(47.95, 714.61) controlPoint1: CGPointMake(46.05, 709.71) controlPoint2: CGPointMake(47.05, 713.01)];
        [bezierPath addCurveToPoint: CGPointMake(55.05, 719.31) controlPoint1: CGPointMake(48.75, 716.21) controlPoint2: CGPointMake(50.75, 719.01)];
        [bezierPath addLineToPoint: CGPointMake(317.35, 735.31)];
        [bezierPath addLineToPoint: CGPointMake(440.25, 967.61)];
        [bezierPath addCurveToPoint: CGPointMake(447.85, 972.11) controlPoint1: CGPointMake(442.45, 971.71) controlPoint2: CGPointMake(446.25, 972.11)];
        [bezierPath addCurveToPoint: CGPointMake(455.05, 968.21) controlPoint1: CGPointMake(449.55, 972.11) controlPoint2: CGPointMake(452.85, 971.61)];
        [bezierPath addLineToPoint: CGPointMake(859.65, 340.61)];
        [bezierPath addCurveToPoint: CGPointMake(861.65, 322.91) controlPoint1: CGPointMake(863.05, 335.41) controlPoint2: CGPointMake(863.75, 328.81)];
        [bezierPath addLineToPoint: CGPointMake(767.15, 60.11)];
        [bezierPath addCurveToPoint: CGPointMake(748.25, 46.91) controlPoint1: CGPointMake(764.25, 52.21) controlPoint2: CGPointMake(756.65, 46.91)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSpotIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 190.4, 0.6);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(319.8, 1023.5)];
        [bezierPath addLineToPoint: CGPointMake(49.1, 491.7)];
        [bezierPath addCurveToPoint: CGPointMake(0, 321.1) controlPoint1: CGPointMake(17, 440.6) controlPoint2: CGPointMake(0, 381.6)];
        [bezierPath addCurveToPoint: CGPointMake(321.1, 0) controlPoint1: CGPointMake(0, 144) controlPoint2: CGPointMake(144.1, 0)];
        [bezierPath addCurveToPoint: CGPointMake(642.2, 321.1) controlPoint1: CGPointMake(498.1, 0) controlPoint2: CGPointMake(642.2, 144.1)];
        [bezierPath addCurveToPoint: CGPointMake(593.3, 491.4) controlPoint1: CGPointMake(642.2, 381.5) controlPoint2: CGPointMake(625.3, 440.4)];
        [bezierPath addLineToPoint: CGPointMake(319.8, 1023.5)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(321.1, 46.7)];
        [bezierPath addCurveToPoint: CGPointMake(46.7, 321.1) controlPoint1: CGPointMake(169.8, 46.7) controlPoint2: CGPointMake(46.7, 169.8)];
        [bezierPath addCurveToPoint: CGPointMake(89.2, 467.6) controlPoint1: CGPointMake(46.7, 373.1) controlPoint2: CGPointMake(61.4, 423.8)];
        [bezierPath addLineToPoint: CGPointMake(90.3, 469.5)];
        [bezierPath addLineToPoint: CGPointMake(320.1, 920.8)];
        [bezierPath addLineToPoint: CGPointMake(553.2, 467.3)];
        [bezierPath addCurveToPoint: CGPointMake(595.5, 321.1) controlPoint1: CGPointMake(580.9, 423.5) controlPoint2: CGPointMake(595.5, 372.9)];
        [bezierPath addCurveToPoint: CGPointMake(321.1, 46.7) controlPoint1: CGPointMake(595.4, 169.8) controlPoint2: CGPointMake(472.4, 46.7)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(326.1, 459.1)];
        [bezierPath addCurveToPoint: CGPointMake(212.2, 345.2) controlPoint1: CGPointMake(263.3, 459.1) controlPoint2: CGPointMake(212.2, 408)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 231.2) controlPoint1: CGPointMake(212.2, 282.4) controlPoint2: CGPointMake(263.3, 231.2)];
        [bezierPath addCurveToPoint: CGPointMake(440, 345.2) controlPoint1: CGPointMake(388.9, 231.2) controlPoint2: CGPointMake(440, 282.3)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 459.1) controlPoint1: CGPointMake(440, 408.1) controlPoint2: CGPointMake(388.9, 459.1)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(326.1, 266.2)];
        [bezierPath addCurveToPoint: CGPointMake(247.2, 345.1) controlPoint1: CGPointMake(282.6, 266.2) controlPoint2: CGPointMake(247.2, 301.6)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 424) controlPoint1: CGPointMake(247.2, 388.6) controlPoint2: CGPointMake(282.6, 424)];
        [bezierPath addCurveToPoint: CGPointMake(405, 345.1) controlPoint1: CGPointMake(369.6, 424) controlPoint2: CGPointMake(405, 388.6)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 266.2) controlPoint1: CGPointMake(405, 301.6) controlPoint2: CGPointMake(369.6, 266.2)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];
        [UIColor.blackColor setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];



        CGContextRestoreGState(context);
    }
}

+ (void)drawCocktailIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(548.5, 589.5)];
        [bezierPath addLineToPoint: CGPointMake(919, 202.8)];
        [bezierPath addLineToPoint: CGPointMake(716.2, 202.8)];
        [bezierPath addLineToPoint: CGPointMake(769.6, 147.1)];
        [bezierPath addCurveToPoint: CGPointMake(821.8, 132.3) controlPoint1: CGPointMake(786.6, 152) controlPoint2: CGPointMake(807, 147)];
        [bezierPath addCurveToPoint: CGPointMake(836.1, 77.6) controlPoint1: CGPointMake(837.2, 116.8) controlPoint2: CGPointMake(842.2, 95.2)];
        [bezierPath addLineToPoint: CGPointMake(889.3, 22)];
        [bezierPath addLineToPoint: CGPointMake(866.1, 0)];
        [bezierPath addLineToPoint: CGPointMake(814.6, 53.8)];
        [bezierPath addCurveToPoint: CGPointMake(755.5, 65.9) controlPoint1: CGPointMake(796.4, 44.9) controlPoint2: CGPointMake(772.4, 49)];
        [bezierPath addCurveToPoint: CGPointMake(744.3, 127.2) controlPoint1: CGPointMake(738, 83.5) controlPoint2: CGPointMake(734.1, 108.8)];
        [bezierPath addLineToPoint: CGPointMake(672, 202.8)];
        [bezierPath addLineToPoint: CGPointMake(130, 202.8)];
        [bezierPath addLineToPoint: CGPointMake(500.6, 589.5)];
        [bezierPath addLineToPoint: CGPointMake(500.6, 915.2)];
        [bezierPath addLineToPoint: CGPointMake(321.6, 992.9)];
        [bezierPath addCurveToPoint: CGPointMake(727.6, 992.9) controlPoint1: CGPointMake(321.6, 992.9) controlPoint2: CGPointMake(523.5, 1064.8)];
        [bezierPath addLineToPoint: CGPointMake(548.6, 915.2)];
        [bezierPath addLineToPoint: CGPointMake(548.6, 589.5)];
        [bezierPath addLineToPoint: CGPointMake(548.5, 589.5)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(578.1, 300.7)];
        [bezierPath addLineToPoint: CGPointMake(498.8, 383.6)];
        [bezierPath addLineToPoint: CGPointMake(521.8, 405.7)];
        [bezierPath addLineToPoint: CGPointMake(622.4, 300.8)];
        [bezierPath addLineToPoint: CGPointMake(764.1, 300.8)];
        [bezierPath addLineToPoint: CGPointMake(524.6, 550.6)];
        [bezierPath addLineToPoint: CGPointMake(285.1, 300.7)];
        [bezierPath addLineToPoint: CGPointMake(578.1, 300.7)];
        [bezierPath closePath];
        bezierPath.miterLimit = 4;

        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawBeerIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 227.02, 0);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(352.7, 716.18)];
        [bezierPath addCurveToPoint: CGPointMake(352.7, 736.82) controlPoint1: CGPointMake(358.4, 721.88) controlPoint2: CGPointMake(358.4, 731.12)];
        [bezierPath addCurveToPoint: CGPointMake(332.05, 736.82) controlPoint1: CGPointMake(347, 742.53) controlPoint2: CGPointMake(337.76, 742.53)];
        [bezierPath addCurveToPoint: CGPointMake(332.05, 716.18) controlPoint1: CGPointMake(326.35, 731.12) controlPoint2: CGPointMake(326.35, 721.88)];
        [bezierPath addCurveToPoint: CGPointMake(352.7, 716.18) controlPoint1: CGPointMake(337.76, 710.47) controlPoint2: CGPointMake(347, 710.47)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(387.11, 569.67)];
        [bezierPath addCurveToPoint: CGPointMake(387.11, 589.33) controlPoint1: CGPointMake(392.54, 575.1) controlPoint2: CGPointMake(392.54, 583.9)];
        [bezierPath addCurveToPoint: CGPointMake(367.45, 589.33) controlPoint1: CGPointMake(381.68, 594.76) controlPoint2: CGPointMake(372.88, 594.76)];
        [bezierPath addCurveToPoint: CGPointMake(367.45, 569.67) controlPoint1: CGPointMake(362.02, 583.9) controlPoint2: CGPointMake(362.02, 575.1)];
        [bezierPath addCurveToPoint: CGPointMake(387.11, 569.67) controlPoint1: CGPointMake(372.88, 564.24) controlPoint2: CGPointMake(381.68, 564.24)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(330.88, 448.5)];
        [bezierPath addCurveToPoint: CGPointMake(330.88, 464.9) controlPoint1: CGPointMake(335.41, 453.03) controlPoint2: CGPointMake(335.41, 460.37)];
        [bezierPath addCurveToPoint: CGPointMake(314.48, 464.9) controlPoint1: CGPointMake(326.35, 469.43) controlPoint2: CGPointMake(319.01, 469.43)];
        [bezierPath addCurveToPoint: CGPointMake(314.48, 448.5) controlPoint1: CGPointMake(309.95, 460.37) controlPoint2: CGPointMake(309.95, 453.03)];
        [bezierPath addCurveToPoint: CGPointMake(330.88, 448.5) controlPoint1: CGPointMake(319.01, 443.97) controlPoint2: CGPointMake(326.35, 443.97)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(384.59, 280.09)];
        [bezierPath addCurveToPoint: CGPointMake(384.59, 309.51) controlPoint1: CGPointMake(392.71, 288.22) controlPoint2: CGPointMake(392.71, 301.38)];
        [bezierPath addCurveToPoint: CGPointMake(355.17, 309.51) controlPoint1: CGPointMake(376.46, 317.63) controlPoint2: CGPointMake(363.29, 317.63)];
        [bezierPath addCurveToPoint: CGPointMake(355.17, 280.09) controlPoint1: CGPointMake(347.05, 301.38) controlPoint2: CGPointMake(347.05, 288.22)];
        [bezierPath addCurveToPoint: CGPointMake(384.59, 280.09) controlPoint1: CGPointMake(363.29, 271.97) controlPoint2: CGPointMake(376.46, 271.97)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(499.08, 42.4)];
        [bezierPath addLineToPoint: CGPointMake(75.48, 42.4)];
        [bezierPath addCurveToPoint: CGPointMake(48.8, 145.98) controlPoint1: CGPointMake(62.79, 80.68) controlPoint2: CGPointMake(54.14, 114.87)];
        [bezierPath addCurveToPoint: CGPointMake(518.27, 142.58) controlPoint1: CGPointMake(124.25, 145.43) controlPoint2: CGPointMake(428.69, 143.23)];
        [bezierPath addCurveToPoint: CGPointMake(499.08, 42.4) controlPoint1: CGPointMake(514.71, 112.36) controlPoint2: CGPointMake(508.52, 79.25)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(521.65, 184.96)];
        [bezierPath addCurveToPoint: CGPointMake(43.33, 188.42) controlPoint1: CGPointMake(433.9, 185.59) controlPoint2: CGPointMake(108.38, 187.95)];
        [bezierPath addCurveToPoint: CGPointMake(95.18, 433.9) controlPoint1: CGPointMake(35.07, 287.56) controlPoint2: CGPointMake(62.78, 355.05)];
        [bezierPath addCurveToPoint: CGPointMake(147.58, 978.1) controlPoint1: CGPointMake(144.48, 554.1) controlPoint2: CGPointMake(200.28, 689.8)];
        [bezierPath addLineToPoint: CGPointMake(433.48, 978.1)];
        [bezierPath addCurveToPoint: CGPointMake(473.08, 421.6) controlPoint1: CGPointMake(376.88, 678) controlPoint2: CGPointMake(427.98, 542)];
        [bezierPath addCurveToPoint: CGPointMake(521.65, 184.96) controlPoint1: CGPointMake(500.6, 348.31) controlPoint2: CGPointMake(525.56, 281.81)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(531.68, 0)];
        [bezierPath addCurveToPoint: CGPointMake(535.98, 15.6) controlPoint1: CGPointMake(531.68, 0) controlPoint2: CGPointMake(535.98, 15.6)];
        [bezierPath addCurveToPoint: CGPointMake(512.88, 436.5) controlPoint1: CGPointMake(592.78, 223.5) controlPoint2: CGPointMake(553.98, 327)];
        [bezierPath addCurveToPoint: CGPointMake(480.08, 995.1) controlPoint1: CGPointMake(468.48, 554.9) controlPoint2: CGPointMake(418.08, 689.1)];
        [bezierPath addLineToPoint: CGPointMake(485.18, 1020.5)];
        [bezierPath addLineToPoint: CGPointMake(96.18, 1020.5)];
        [bezierPath addLineToPoint: CGPointMake(101.28, 995.2)];
        [bezierPath addCurveToPoint: CGPointMake(55.98, 450) controlPoint1: CGPointMake(159.48, 702) controlPoint2: CGPointMake(104.48, 568.1)];
        [bezierPath addCurveToPoint: CGPointMake(40.28, 14.2) controlPoint1: CGPointMake(9.38, 336.5) controlPoint2: CGPointMake(-34.62, 229.4)];
        [bezierPath addLineToPoint: CGPointMake(45.28, 0)];
        [bezierPath addLineToPoint: CGPointMake(531.68, 0)];
        [bezierPath addLineToPoint: CGPointMake(531.68, 0)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawNavigationArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 289.9, 2.8);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(27.6, 0)];
        [bezierPath addLineToPoint: CGPointMake(0, 22.8)];
        [bezierPath addLineToPoint: CGPointMake(401.8, 509.2)];
        [bezierPath addLineToPoint: CGPointMake(0, 995.6)];
        [bezierPath addLineToPoint: CGPointMake(27.6, 1018.4)];
        [bezierPath addLineToPoint: CGPointMake(448.2, 509.2)];
        [bezierPath addLineToPoint: CGPointMake(27.6, 0)];
        [bezierPath closePath];
        bezierPath.miterLimit = 4;

        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawNextArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 2.4, 65.61);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(1016.4, 437.29)];
        [bezierPath addCurveToPoint: CGPointMake(1015.9, 431.89) controlPoint1: CGPointMake(1016.2, 435.49) controlPoint2: CGPointMake(1016.2, 433.69)];
        [bezierPath addCurveToPoint: CGPointMake(994.1, 393.09) controlPoint1: CGPointMake(1013, 416.59) controlPoint2: CGPointMake(1005.1, 403.19)];
        [bezierPath addLineToPoint: CGPointMake(622.5, 20.79)];
        [bezierPath addCurveToPoint: CGPointMake(522.4, 20.69) controlPoint1: CGPointMake(594.9, -6.91) controlPoint2: CGPointMake(550, -6.91)];
        [bezierPath addLineToPoint: CGPointMake(521.4, 21.69)];
        [bezierPath addCurveToPoint: CGPointMake(521.3, 121.79) controlPoint1: CGPointMake(493.7, 49.29) controlPoint2: CGPointMake(493.7, 94.19)];
        [bezierPath addLineToPoint: CGPointMake(773.3, 374.29)];
        [bezierPath addLineToPoint: CGPointMake(70.8, 374.29)];
        [bezierPath addCurveToPoint: CGPointMake(0, 445.09) controlPoint1: CGPointMake(31.7, 374.29) controlPoint2: CGPointMake(0, 405.99)];
        [bezierPath addLineToPoint: CGPointMake(0, 446.49)];
        [bezierPath addCurveToPoint: CGPointMake(70.8, 517.29) controlPoint1: CGPointMake(0, 485.59) controlPoint2: CGPointMake(31.7, 517.29)];
        [bezierPath addLineToPoint: CGPointMake(773.3, 517.29)];
        [bezierPath addLineToPoint: CGPointMake(521.3, 769.79)];
        [bezierPath addCurveToPoint: CGPointMake(521.4, 869.89) controlPoint1: CGPointMake(493.7, 797.49) controlPoint2: CGPointMake(493.7, 842.29)];
        [bezierPath addLineToPoint: CGPointMake(522.4, 870.89)];
        [bezierPath addCurveToPoint: CGPointMake(622.5, 870.79) controlPoint1: CGPointMake(550.1, 898.49) controlPoint2: CGPointMake(594.9, 898.49)];
        [bezierPath addLineToPoint: CGPointMake(994.1, 498.49)];
        [bezierPath addCurveToPoint: CGPointMake(1015.9, 459.69) controlPoint1: CGPointMake(1005.1, 488.39) controlPoint2: CGPointMake(1013, 474.99)];
        [bezierPath addCurveToPoint: CGPointMake(1016.4, 454.29) controlPoint1: CGPointMake(1016.2, 457.89) controlPoint2: CGPointMake(1016.2, 456.09)];
        [bezierPath addCurveToPoint: CGPointMake(1017.2, 446.49) controlPoint1: CGPointMake(1016.7, 451.69) controlPoint2: CGPointMake(1017.2, 449.19)];
        [bezierPath addLineToPoint: CGPointMake(1017.2, 445.09)];
        [bezierPath addCurveToPoint: CGPointMake(1016.4, 437.29) controlPoint1: CGPointMake(1017.2, 442.39) controlPoint2: CGPointMake(1016.7, 439.89)];
        [bezierPath closePath];
        bezierPath.miterLimit = 4;

        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSearchIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 35.9, 5.1);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(394.3, 45)];
        [bezierPath addCurveToPoint: CGPointMake(45.1, 394.2) controlPoint1: CGPointMake(201.7, 45) controlPoint2: CGPointMake(45.1, 201.7)];
        [bezierPath addCurveToPoint: CGPointMake(394.3, 743.4) controlPoint1: CGPointMake(45.1, 586.7) controlPoint2: CGPointMake(201.7, 743.4)];
        [bezierPath addCurveToPoint: CGPointMake(743.5, 394.2) controlPoint1: CGPointMake(586.9, 743.4) controlPoint2: CGPointMake(743.5, 586.8)];
        [bezierPath addCurveToPoint: CGPointMake(394.3, 45) controlPoint1: CGPointMake(743.5, 201.6) controlPoint2: CGPointMake(586.8, 45)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(788.6, 394.3)];
        [bezierPath addCurveToPoint: CGPointMake(716.01, 622) controlPoint1: CGPointMake(788.6, 479.06) controlPoint2: CGPointMake(761.71, 557.65)];
        [bezierPath addCurveToPoint: CGPointMake(979.9, 911.6) controlPoint1: CGPointMake(763.44, 674.04) controlPoint2: CGPointMake(979.9, 911.6)];
        [bezierPath addLineToPoint: CGPointMake(863.3, 1017.9)];
        [bezierPath addCurveToPoint: CGPointMake(600.91, 729.94) controlPoint1: CGPointMake(863.3, 1017.9) controlPoint2: CGPointMake(651.21, 785.15)];
        [bezierPath addCurveToPoint: CGPointMake(394.3, 788.5) controlPoint1: CGPointMake(540.79, 767.06) controlPoint2: CGPointMake(470, 788.5)];
        [bezierPath addCurveToPoint: CGPointMake(0, 394.2) controlPoint1: CGPointMake(176.9, 788.5) controlPoint2: CGPointMake(0, 611.6)];
        [bezierPath addCurveToPoint: CGPointMake(394.3, 0) controlPoint1: CGPointMake(0, 176.8) controlPoint2: CGPointMake(176.9, 0)];
        [bezierPath addCurveToPoint: CGPointMake(788.6, 394.3) controlPoint1: CGPointMake(611.7, 0) controlPoint2: CGPointMake(788.6, 176.9)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSpotSideBarIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 123.4, -3.4);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(435.86, 3.4)];
        [bezierPath addLineToPoint: CGPointMake(342.32, 3.4)];
        [bezierPath addCurveToPoint: CGPointMake(389.1, 0) controlPoint1: CGPointMake(357.59, 1.16) controlPoint2: CGPointMake(373.21, 0)];
        [bezierPath addCurveToPoint: CGPointMake(435.86, 3.4) controlPoint1: CGPointMake(404.98, 0) controlPoint2: CGPointMake(420.59, 1.16)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(663.03, 159.4)];
        [bezierPath addCurveToPoint: CGPointMake(761.6, 159.4) controlPoint1: CGPointMake(663.03, 159.4) controlPoint2: CGPointMake(761.6, 159.4)];
        [bezierPath addCurveToPoint: CGPointMake(870.56, 159.4) controlPoint1: CGPointMake(814.01, 159.4) controlPoint2: CGPointMake(868.86, 159.4)];
        [bezierPath addCurveToPoint: CGPointMake(870.6, 247.4) controlPoint1: CGPointMake(870.6, 159.4) controlPoint2: CGPointMake(870.6, 247.4)];
        [bezierPath addLineToPoint: CGPointMake(699.69, 247.4)];
        [bezierPath addCurveToPoint: CGPointMake(663.03, 159.4) controlPoint1: CGPointMake(691.85, 216) controlPoint2: CGPointMake(679.37, 186.41)];
        [bezierPath addLineToPoint: CGPointMake(663.03, 159.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(870.55, 313.4)];
        [bezierPath addCurveToPoint: CGPointMake(870.6, 401.4) controlPoint1: CGPointMake(870.6, 313.4) controlPoint2: CGPointMake(870.6, 401.4)];
        [bezierPath addLineToPoint: CGPointMake(700.04, 401.4)];
        [bezierPath addCurveToPoint: CGPointMake(709.2, 325.1) controlPoint1: CGPointMake(706.1, 376.58) controlPoint2: CGPointMake(709.2, 350.98)];
        [bezierPath addCurveToPoint: CGPointMake(708.99, 313.4) controlPoint1: CGPointMake(709.2, 321.18) controlPoint2: CGPointMake(709.13, 317.28)];
        [bezierPath addLineToPoint: CGPointMake(717.6, 313.4)];
        [bezierPath addCurveToPoint: CGPointMake(870.6, 313.4) controlPoint1: CGPointMake(749.28, 313.4) controlPoint2: CGPointMake(870.6, 313.4)];
        [bezierPath addLineToPoint: CGPointMake(870.55, 313.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(870.6, 467.4)];
        [bezierPath addCurveToPoint: CGPointMake(870.6, 555.4) controlPoint1: CGPointMake(870.6, 467.4) controlPoint2: CGPointMake(870.6, 555.4)];
        [bezierPath addLineToPoint: CGPointMake(629.46, 555.4)];
        [bezierPath addCurveToPoint: CGPointMake(660.3, 495.4) controlPoint1: CGPointMake(648.36, 518.64) controlPoint2: CGPointMake(660.3, 495.4)];
        [bezierPath addCurveToPoint: CGPointMake(675.97, 467.4) controlPoint1: CGPointMake(666.01, 486.31) controlPoint2: CGPointMake(671.23, 476.96)];
        [bezierPath addCurveToPoint: CGPointMake(870.6, 467.4) controlPoint1: CGPointMake(691.12, 467.4) controlPoint2: CGPointMake(870.6, 467.4)];
        [bezierPath addLineToPoint: CGPointMake(870.6, 467.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(870.37, 607.4)];
        [bezierPath addCurveToPoint: CGPointMake(870.6, 695.4) controlPoint1: CGPointMake(870.6, 607.4) controlPoint2: CGPointMake(870.6, 695.4)];
        [bezierPath addLineToPoint: CGPointMake(557.5, 695.4)];
        [bezierPath addCurveToPoint: CGPointMake(602.73, 607.4) controlPoint1: CGPointMake(573.57, 664.14) controlPoint2: CGPointMake(588.97, 634.18)];
        [bezierPath addCurveToPoint: CGPointMake(870.37, 607.4) controlPoint1: CGPointMake(620.7, 607.4) controlPoint2: CGPointMake(861.95, 607.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(386.9, 924.4)];
        [bezierPath addCurveToPoint: CGPointMake(387.31, 924.4) controlPoint1: CGPointMake(386.9, 924.4) controlPoint2: CGPointMake(387.31, 924.4)];
        [bezierPath addCurveToPoint: CGPointMake(387.1, 924.8) controlPoint1: CGPointMake(387.17, 924.67) controlPoint2: CGPointMake(387.1, 924.8)];
        [bezierPath addCurveToPoint: CGPointMake(386.9, 924.4) controlPoint1: CGPointMake(387.1, 924.8) controlPoint2: CGPointMake(387.03, 924.67)];
        [bezierPath addLineToPoint: CGPointMake(386.9, 924.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(319.8, 1027.5)];
        [bezierPath addLineToPoint: CGPointMake(49.1, 495.7)];
        [bezierPath addCurveToPoint: CGPointMake(0, 325.1) controlPoint1: CGPointMake(17, 444.6) controlPoint2: CGPointMake(0, 385.6)];
        [bezierPath addCurveToPoint: CGPointMake(321.1, 4) controlPoint1: CGPointMake(0, 148) controlPoint2: CGPointMake(144.1, 4)];
        [bezierPath addCurveToPoint: CGPointMake(642.2, 325.1) controlPoint1: CGPointMake(498.1, 4) controlPoint2: CGPointMake(642.2, 148.1)];
        [bezierPath addCurveToPoint: CGPointMake(593.3, 495.4) controlPoint1: CGPointMake(642.2, 385.5) controlPoint2: CGPointMake(625.3, 444.4)];
        [bezierPath addLineToPoint: CGPointMake(319.8, 1027.5)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(321.1, 50.7)];
        [bezierPath addCurveToPoint: CGPointMake(46.7, 325.1) controlPoint1: CGPointMake(169.8, 50.7) controlPoint2: CGPointMake(46.7, 173.8)];
        [bezierPath addCurveToPoint: CGPointMake(89.2, 471.6) controlPoint1: CGPointMake(46.7, 377.1) controlPoint2: CGPointMake(61.4, 427.8)];
        [bezierPath addLineToPoint: CGPointMake(90.3, 473.5)];
        [bezierPath addLineToPoint: CGPointMake(320.1, 924.8)];
        [bezierPath addLineToPoint: CGPointMake(553.2, 471.3)];
        [bezierPath addCurveToPoint: CGPointMake(595.5, 325.1) controlPoint1: CGPointMake(580.9, 427.5) controlPoint2: CGPointMake(595.5, 376.9)];
        [bezierPath addCurveToPoint: CGPointMake(321.1, 50.7) controlPoint1: CGPointMake(595.4, 173.8) controlPoint2: CGPointMake(472.4, 50.7)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(326.1, 463.1)];
        [bezierPath addCurveToPoint: CGPointMake(212.2, 349.2) controlPoint1: CGPointMake(263.3, 463.1) controlPoint2: CGPointMake(212.2, 412)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 235.2) controlPoint1: CGPointMake(212.2, 286.4) controlPoint2: CGPointMake(263.3, 235.2)];
        [bezierPath addCurveToPoint: CGPointMake(440, 349.2) controlPoint1: CGPointMake(388.9, 235.2) controlPoint2: CGPointMake(440, 286.3)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 463.1) controlPoint1: CGPointMake(440, 412.1) controlPoint2: CGPointMake(388.9, 463.1)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(326.1, 270.2)];
        [bezierPath addCurveToPoint: CGPointMake(247.2, 349.1) controlPoint1: CGPointMake(282.6, 270.2) controlPoint2: CGPointMake(247.2, 305.6)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 428) controlPoint1: CGPointMake(247.2, 392.6) controlPoint2: CGPointMake(282.6, 428)];
        [bezierPath addCurveToPoint: CGPointMake(405, 349.1) controlPoint1: CGPointMake(369.6, 428) controlPoint2: CGPointMake(405, 392.6)];
        [bezierPath addCurveToPoint: CGPointMake(326.1, 270.2) controlPoint1: CGPointMake(405, 305.6) controlPoint2: CGPointMake(369.6, 270.2)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawFeaturedListIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 116.6, 0.6);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(598.83, 159.4)];
        [bezierPath addCurveToPoint: CGPointMake(697.4, 159.4) controlPoint1: CGPointMake(598.83, 159.4) controlPoint2: CGPointMake(697.4, 159.4)];
        [bezierPath addCurveToPoint: CGPointMake(806.36, 159.4) controlPoint1: CGPointMake(749.81, 159.4) controlPoint2: CGPointMake(804.66, 159.4)];
        [bezierPath addCurveToPoint: CGPointMake(806.4, 247.4) controlPoint1: CGPointMake(806.4, 159.4) controlPoint2: CGPointMake(806.4, 247.4)];
        [bezierPath addLineToPoint: CGPointMake(635.49, 247.4)];
        [bezierPath addCurveToPoint: CGPointMake(598.83, 159.4) controlPoint1: CGPointMake(627.65, 216) controlPoint2: CGPointMake(615.17, 186.41)];
        [bezierPath addLineToPoint: CGPointMake(598.83, 159.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(644.79, 313.4)];
        [bezierPath addCurveToPoint: CGPointMake(653.4, 313.4) controlPoint1: CGPointMake(644.79, 313.4) controlPoint2: CGPointMake(653.4, 313.4)];
        [bezierPath addCurveToPoint: CGPointMake(806.35, 313.4) controlPoint1: CGPointMake(684.71, 313.4) controlPoint2: CGPointMake(803.57, 313.4)];
        [bezierPath addCurveToPoint: CGPointMake(806.4, 401.4) controlPoint1: CGPointMake(806.4, 313.4) controlPoint2: CGPointMake(806.4, 401.4)];
        [bezierPath addLineToPoint: CGPointMake(635.84, 401.4)];
        [bezierPath addCurveToPoint: CGPointMake(645, 325.1) controlPoint1: CGPointMake(641.9, 376.58) controlPoint2: CGPointMake(645, 350.98)];
        [bezierPath addCurveToPoint: CGPointMake(644.79, 313.4) controlPoint1: CGPointMake(645, 321.18) controlPoint2: CGPointMake(644.93, 317.28)];
        [bezierPath addLineToPoint: CGPointMake(644.79, 313.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(228.14, 295.64)];
        [bezierPath addCurveToPoint: CGPointMake(228.14, 428.16) controlPoint1: CGPointMake(191.55, 332.24) controlPoint2: CGPointMake(191.55, 391.56)];
        [bezierPath addCurveToPoint: CGPointMake(360.66, 428.16) controlPoint1: CGPointMake(264.74, 464.75) controlPoint2: CGPointMake(324.06, 464.75)];
        [bezierPath addCurveToPoint: CGPointMake(360.66, 295.64) controlPoint1: CGPointMake(397.25, 391.56) controlPoint2: CGPointMake(397.25, 332.24)];
        [bezierPath addCurveToPoint: CGPointMake(228.14, 295.64) controlPoint1: CGPointMake(324.06, 259.05) controlPoint2: CGPointMake(264.74, 259.05)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(806.4, 467.4)];
        [bezierPath addCurveToPoint: CGPointMake(806.4, 555.4) controlPoint1: CGPointMake(806.4, 467.4) controlPoint2: CGPointMake(806.4, 555.4)];
        [bezierPath addLineToPoint: CGPointMake(565.26, 555.4)];
        [bezierPath addCurveToPoint: CGPointMake(596.1, 495.4) controlPoint1: CGPointMake(584.16, 518.64) controlPoint2: CGPointMake(596.1, 495.4)];
        [bezierPath addCurveToPoint: CGPointMake(611.77, 467.4) controlPoint1: CGPointMake(601.81, 486.31) controlPoint2: CGPointMake(607.03, 476.96)];
        [bezierPath addCurveToPoint: CGPointMake(806.4, 467.4) controlPoint1: CGPointMake(626.92, 467.4) controlPoint2: CGPointMake(806.4, 467.4)];
        [bezierPath addLineToPoint: CGPointMake(806.4, 467.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(806.17, 607.4)];
        [bezierPath addCurveToPoint: CGPointMake(806.4, 695.4) controlPoint1: CGPointMake(806.4, 607.4) controlPoint2: CGPointMake(806.4, 695.4)];
        [bezierPath addLineToPoint: CGPointMake(493.3, 695.4)];
        [bezierPath addCurveToPoint: CGPointMake(538.53, 607.4) controlPoint1: CGPointMake(509.37, 664.14) controlPoint2: CGPointMake(524.77, 634.18)];
        [bezierPath addCurveToPoint: CGPointMake(806.17, 607.4) controlPoint1: CGPointMake(556.5, 607.4) controlPoint2: CGPointMake(797.75, 607.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(322.7, 924.4)];
        [bezierPath addCurveToPoint: CGPointMake(323.11, 924.4) controlPoint1: CGPointMake(322.7, 924.4) controlPoint2: CGPointMake(323.11, 924.4)];
        [bezierPath addCurveToPoint: CGPointMake(322.9, 924.8) controlPoint1: CGPointMake(322.97, 924.67) controlPoint2: CGPointMake(322.9, 924.8)];
        [bezierPath addCurveToPoint: CGPointMake(322.7, 924.4) controlPoint1: CGPointMake(322.9, 924.8) controlPoint2: CGPointMake(322.83, 924.67)];
        [bezierPath addLineToPoint: CGPointMake(322.7, 924.4)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(579, 338.6)];
        [bezierPath addCurveToPoint: CGPointMake(534.4, 492.9) controlPoint1: CGPointMake(579, 395.3) controlPoint2: CGPointMake(562.6, 448.2)];
        [bezierPath addCurveToPoint: CGPointMake(288.4, 971.6) controlPoint1: CGPointMake(418.1, 652.6) controlPoint2: CGPointMake(337.2, 812.2)];
        [bezierPath addCurveToPoint: CGPointMake(44.8, 493.2) controlPoint1: CGPointMake(232.2, 806.4) controlPoint2: CGPointMake(150.6, 647)];
        [bezierPath addCurveToPoint: CGPointMake(0, 338.6) controlPoint1: CGPointMake(16.5, 448.5) controlPoint2: CGPointMake(0, 395.5)];
        [bezierPath addCurveToPoint: CGPointMake(289.5, 49.1) controlPoint1: CGPointMake(0, 178.7) controlPoint2: CGPointMake(129.6, 49.1)];
        [bezierPath addCurveToPoint: CGPointMake(579, 338.6) controlPoint1: CGPointMake(449.4, 49.1) controlPoint2: CGPointMake(579, 178.7)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawPreviousArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 2.4, 65.61);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(0.8, 437.29)];
        [bezierPath addCurveToPoint: CGPointMake(1.3, 431.89) controlPoint1: CGPointMake(1, 435.49) controlPoint2: CGPointMake(1, 433.69)];
        [bezierPath addCurveToPoint: CGPointMake(23.1, 393.09) controlPoint1: CGPointMake(4.2, 416.59) controlPoint2: CGPointMake(12.1, 403.19)];
        [bezierPath addLineToPoint: CGPointMake(394.7, 20.79)];
        [bezierPath addCurveToPoint: CGPointMake(494.8, 20.69) controlPoint1: CGPointMake(422.3, -6.91) controlPoint2: CGPointMake(467.2, -6.91)];
        [bezierPath addLineToPoint: CGPointMake(495.8, 21.69)];
        [bezierPath addCurveToPoint: CGPointMake(495.9, 121.79) controlPoint1: CGPointMake(523.5, 49.29) controlPoint2: CGPointMake(523.5, 94.19)];
        [bezierPath addLineToPoint: CGPointMake(243.9, 374.29)];
        [bezierPath addLineToPoint: CGPointMake(946.4, 374.29)];
        [bezierPath addCurveToPoint: CGPointMake(1017.2, 445.09) controlPoint1: CGPointMake(985.5, 374.29) controlPoint2: CGPointMake(1017.2, 405.99)];
        [bezierPath addLineToPoint: CGPointMake(1017.2, 446.49)];
        [bezierPath addCurveToPoint: CGPointMake(946.4, 517.29) controlPoint1: CGPointMake(1017.2, 485.59) controlPoint2: CGPointMake(985.5, 517.29)];
        [bezierPath addLineToPoint: CGPointMake(243.9, 517.29)];
        [bezierPath addLineToPoint: CGPointMake(495.9, 769.79)];
        [bezierPath addCurveToPoint: CGPointMake(495.8, 869.89) controlPoint1: CGPointMake(523.5, 797.49) controlPoint2: CGPointMake(523.5, 842.29)];
        [bezierPath addLineToPoint: CGPointMake(494.8, 870.89)];
        [bezierPath addCurveToPoint: CGPointMake(394.7, 870.79) controlPoint1: CGPointMake(467.1, 898.49) controlPoint2: CGPointMake(422.3, 898.49)];
        [bezierPath addLineToPoint: CGPointMake(23.1, 498.49)];
        [bezierPath addCurveToPoint: CGPointMake(1.3, 459.69) controlPoint1: CGPointMake(12.1, 488.39) controlPoint2: CGPointMake(4.2, 474.99)];
        [bezierPath addCurveToPoint: CGPointMake(0.8, 454.29) controlPoint1: CGPointMake(1, 457.89) controlPoint2: CGPointMake(1, 456.09)];
        [bezierPath addCurveToPoint: CGPointMake(0, 446.49) controlPoint1: CGPointMake(0.5, 451.69) controlPoint2: CGPointMake(0, 449.19)];
        [bezierPath addLineToPoint: CGPointMake(0, 445.09)];
        [bezierPath addCurveToPoint: CGPointMake(0.8, 437.29) controlPoint1: CGPointMake(0, 442.39) controlPoint2: CGPointMake(0.5, 439.89)];
        [bezierPath closePath];
        bezierPath.miterLimit = 4;

        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawMapBubblePinFilledIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* myMapGradient1 = [UIColor colorWithRed: 0.846 green: 0.456 blue: 0.137 alpha: 1];
    UIColor* myMapGradient2 = [UIColor colorWithRed: 0.878 green: 0.378 blue: 0.151 alpha: 1];
    UIColor* myMapGradient3 = [UIColor colorWithRed: 0.887 green: 0.361 blue: 0.154 alpha: 1];

    //// Gradient Declarations
    CGFloat myMapPinGradientLocations[] = {0, 0.85, 1};
    CGGradientRef myMapPinGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)myMapGradient1.CGColor, (id)myMapGradient2.CGColor, (id)myMapGradient3.CGColor], myMapPinGradientLocations);

    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextRotateCTM(context, -0.65 * M_PI / 180);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bubble Drawing
        UIBezierPath* bubblePath = UIBezierPath.bezierPath;
        [bubblePath moveToPoint: CGPointMake(518.17, 38.47)];
        [bubblePath addCurveToPoint: CGPointMake(32.47, 524.17) controlPoint1: CGPointMake(249.87, 38.47) controlPoint2: CGPointMake(32.47, 255.97)];
        [bubblePath addCurveToPoint: CGPointMake(191.07, 883.17) controlPoint1: CGPointMake(32.47, 666.37) controlPoint2: CGPointMake(93.57, 794.37)];
        [bubblePath addLineToPoint: CGPointMake(177.47, 1021.07)];
        [bubblePath addLineToPoint: CGPointMake(307.77, 962.07)];
        [bubblePath addCurveToPoint: CGPointMake(518.27, 1009.87) controlPoint1: CGPointMake(371.47, 992.77) controlPoint2: CGPointMake(442.87, 1009.87)];
        [bubblePath addCurveToPoint: CGPointMake(1003.97, 524.17) controlPoint1: CGPointMake(786.57, 1009.87) controlPoint2: CGPointMake(1003.97, 792.37)];
        [bubblePath addCurveToPoint: CGPointMake(518.17, 38.47) controlPoint1: CGPointMake(1003.97, 255.97) controlPoint2: CGPointMake(786.37, 38.47)];
        [bubblePath closePath];
        CGContextSaveGState(context);
        [bubblePath addClip];
        CGContextDrawLinearGradient(context, myMapPinGradient,
            CGPointMake(518.13, 38.46),
            CGPointMake(518.13, 1021.09),
            kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
        CGContextRestoreGState(context);
        [strokeColor setStroke];
        bubblePath.lineWidth = 8;
        [bubblePath stroke];



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(myMapPinGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawMapBubblePinEmptyIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bubble Drawing
        UIBezierPath* bubblePath = UIBezierPath.bezierPath;
        [bubblePath moveToPoint: CGPointMake(524.1, 32.6)];
        [bubblePath addCurveToPoint: CGPointMake(38.4, 518.3) controlPoint1: CGPointMake(255.8, 32.6) controlPoint2: CGPointMake(38.4, 250.1)];
        [bubblePath addCurveToPoint: CGPointMake(197, 877.3) controlPoint1: CGPointMake(38.4, 660.5) controlPoint2: CGPointMake(99.5, 788.5)];
        [bubblePath addLineToPoint: CGPointMake(183.4, 1015.2)];
        [bubblePath addLineToPoint: CGPointMake(313.7, 956.2)];
        [bubblePath addCurveToPoint: CGPointMake(524.2, 1004) controlPoint1: CGPointMake(377.4, 986.9) controlPoint2: CGPointMake(448.8, 1004)];
        [bubblePath addCurveToPoint: CGPointMake(1009.9, 518.3) controlPoint1: CGPointMake(792.5, 1004) controlPoint2: CGPointMake(1009.9, 786.5)];
        [bubblePath addCurveToPoint: CGPointMake(524.1, 32.6) controlPoint1: CGPointMake(1009.9, 250.1) controlPoint2: CGPointMake(792.3, 32.6)];
        [bubblePath closePath];
        [SHStyleKit.myWhiteColor setFill];
        [bubblePath fill];
        [strokeColor setStroke];
        bubblePath.lineWidth = 8;
        [bubblePath stroke];



        CGContextRestoreGState(context);
    }
}

+ (void)drawGradientBackgroundWithWidth: (CGFloat)width height: (CGFloat)height scaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* myTintColorGradientColor1 = [UIColor colorWithRed: 0.918 green: 0.682 blue: 0.455 alpha: 1];
    UIColor* myTintColorGradientColor2 = [UIColor colorWithRed: 0.933 green: 0.627 blue: 0.518 alpha: 1];

    //// Gradient Declarations
    CGFloat myTintColorGradientLocations[] = {0, 1};
    CGGradientRef myTintColorGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)myTintColorGradientColor1.CGColor, (id)myTintColorGradientColor2.CGColor], myTintColorGradientLocations);

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, width, height)];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, myTintColorGradient, CGPointMake(160, -0), CGPointMake(160, 568), 0);
        CGContextRestoreGState(context);



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(myTintColorGradient);
    CGColorSpaceRelease(colorSpace);
}

#pragma mark Generated Images

+ (UIImage*)imageOfWineIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawWineIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfWineIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfWineIcon;
}

+ (UIImage*)imageOfSpecialsIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSpecialsIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSpecialsIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSpecialsIcon;
}

+ (UIImage*)imageOfSpotIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSpotIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSpotIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSpotIcon;
}

+ (UIImage*)imageOfCocktailIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawCocktailIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfCocktailIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfCocktailIcon;
}

+ (UIImage*)imageOfBeerIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawBeerIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfBeerIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfBeerIcon;
}

+ (UIImage*)imageOfNavigationArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawNavigationArrowIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfNavigationArrowIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfNavigationArrowIcon;
}

+ (UIImage*)imageOfNextArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawNextArrowIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfNextArrowIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfNextArrowIcon;
}

+ (UIImage*)imageOfSearchIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSearchIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSearchIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSearchIcon;
}

+ (UIImage*)imageOfSpotSideBarIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSpotSideBarIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSpotSideBarIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfSpotSideBarIcon;
}

+ (UIImage*)imageOfFeaturedListIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawFeaturedListIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfFeaturedListIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfFeaturedListIcon;
}

+ (UIImage*)imageOfPreviousArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawPreviousArrowIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfPreviousArrowIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfPreviousArrowIcon;
}

+ (UIImage*)imageOfMapBubblePinFilledIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawMapBubblePinFilledIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfMapBubblePinFilledIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfMapBubblePinFilledIcon;
}

+ (UIImage*)imageOfMapBubblePinEmptyIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawMapBubblePinEmptyIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfMapBubblePinEmptyIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfMapBubblePinEmptyIcon;
}

+ (UIImage*)imageOfGradientBackgroundWithWidth: (CGFloat)width height: (CGFloat)height scaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), NO, 0.0f);
    [SHStyleKit drawGradientBackgroundWithWidth: width height: height scaleX: scaleX scaleY: scaleY];
    UIImage* imageOfGradientBackground = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfGradientBackground;
}

@end
