//
//  SHStyleKit.m
//  SpotHopper
//
//  Created by SpotHopper on 6/13/14.
//  Copyright (c) 2014 SpotHopper. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "SHStyleKit.h"


@implementation SHStyleKit

#pragma mark Cache

static UIColor* _myTintColor = nil;
static UIColor* _myTintColorTransparent = nil;
static UIColor* _myTextColor = nil;
static UIColor* _myWhiteColor = nil;
static UIColor* _myBlackColor = nil;
static UIColor* _myLightHeaderColor = nil;
static UIColor* _myClearColor = nil;
static UIColor* _myScreenColor = nil;
static UIColor* _myTintColorDesaturated = nil;
static UIColor* _myWhiteColorTransparent = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _myTintColor = [UIColor colorWithRed: 0.878 green: 0.4 blue: 0.149 alpha: 1];
    CGFloat myTintColorHSBA[4];
    [_myTintColor getHue: &myTintColorHSBA[0] saturation: &myTintColorHSBA[1] brightness: &myTintColorHSBA[2] alpha: &myTintColorHSBA[3]];

    _myTintColorTransparent = [SHStyleKit.myTintColor colorWithAlphaComponent: 0.8];
    _myTintColorDesaturated = [UIColor colorWithHue: myTintColorHSBA[0] saturation: 0.5 brightness: myTintColorHSBA[2] alpha: myTintColorHSBA[3]];
    _myTextColor = [UIColor colorWithRed: 0.4 green: 0.4 blue: 0.4 alpha: 1];
    _myWhiteColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _myWhiteColorTransparent = [SHStyleKit.myWhiteColor colorWithAlphaComponent: 0.5];
    _myBlackColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    _myLightHeaderColor = [UIColor colorWithRed: 0.992 green: 0.969 blue: 0.945 alpha: 1];
    _myClearColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];
    _myScreenColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.196];

}

#pragma mark Colors

+ (UIColor*)myTintColor { return _myTintColor; }
+ (UIColor*)myTintColorTransparent { return _myTintColorTransparent; }
+ (UIColor*)myTextColor { return _myTextColor; }
+ (UIColor*)myWhiteColor { return _myWhiteColor; }
+ (UIColor*)myBlackColor { return _myBlackColor; }
+ (UIColor*)myLightHeaderColor { return _myLightHeaderColor; }
+ (UIColor*)myClearColor { return _myClearColor; }
+ (UIColor*)myScreenColor { return _myScreenColor; }
+ (UIColor*)myTintColorDesaturated { return _myTintColorDesaturated; }
+ (UIColor*)myWhiteColorTransparent { return _myWhiteColorTransparent; }

#pragma mark Drawing Methods

+ (void)drawWineIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(287.45, 212.29)];
        [bezierPath addLineToPoint: CGPointMake(761.45, 212.29)];
        [bezierPath addLineToPoint: CGPointMake(287.45, 212.29)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(734.35, 59.89)];
        [bezierPath addLineToPoint: CGPointMake(299.35, 59.89)];
        [bezierPath addCurveToPoint: CGPointMake(315.06, 198.77) controlPoint1: CGPointMake(302.42, 110.88) controlPoint2: CGPointMake(307.67, 157.18)];
        [bezierPath addLineToPoint: CGPointMake(727.38, 198.77)];
        [bezierPath addCurveToPoint: CGPointMake(734.35, 59.89) controlPoint1: CGPointMake(732.02, 157.13) controlPoint2: CGPointMake(734.35, 110.81)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(723.96, 225.71)];
        [bezierPath addLineToPoint: CGPointMake(320.3, 225.71)];
        [bezierPath addCurveToPoint: CGPointMake(528.65, 471.97) controlPoint1: CGPointMake(354.33, 386.73) controlPoint2: CGPointMake(424.08, 469.37)];
        [bezierPath addCurveToPoint: CGPointMake(643.05, 429.02) controlPoint1: CGPointMake(575.45, 472.97) controlPoint2: CGPointMake(612.95, 458.75)];
        [bezierPath addCurveToPoint: CGPointMake(723.96, 225.71) controlPoint1: CGPointMake(683.27, 389.17) controlPoint2: CGPointMake(710.32, 321.07)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(525.85, 921.24)];
        [bezierPath addCurveToPoint: CGPointMake(473.15, 969.95) controlPoint1: CGPointMake(511.25, 939.43) controlPoint2: CGPointMake(493.65, 955.74)];
        [bezierPath addLineToPoint: CGPointMake(574.75, 969.95)];
        [bezierPath addCurveToPoint: CGPointMake(525.85, 921.24) controlPoint1: CGPointMake(555.05, 955.74) controlPoint2: CGPointMake(538.75, 939.43)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(787.95, 5.9)];
        [bezierPath addCurveToPoint: CGPointMake(788.35, 32.45) controlPoint1: CGPointMake(787.95, 5.9) controlPoint2: CGPointMake(788.35, 32.45)];
        [bezierPath addCurveToPoint: CGPointMake(681.25, 467.2) controlPoint1: CGPointMake(791.65, 250.37) controlPoint2: CGPointMake(756.65, 392.54)];
        [bezierPath addCurveToPoint: CGPointMake(555.15, 524.96) controlPoint1: CGPointMake(646.95, 501.1) controlPoint2: CGPointMake(604.65, 520.49)];
        [bezierPath addLineToPoint: CGPointMake(555.15, 862.78)];
        [bezierPath addCurveToPoint: CGPointMake(668.45, 958.32) controlPoint1: CGPointMake(572.15, 905.23) controlPoint2: CGPointMake(609.25, 936.55)];
        [bezierPath addCurveToPoint: CGPointMake(690.25, 996.1) controlPoint1: CGPointMake(683.95, 964.09) controlPoint2: CGPointMake(693.15, 979.99)];
        [bezierPath addCurveToPoint: CGPointMake(656.75, 1023.94) controlPoint1: CGPointMake(687.35, 1012.21) controlPoint2: CGPointMake(673.25, 1023.94)];
        [bezierPath addLineToPoint: CGPointMake(384.05, 1023.94)];
        [bezierPath addCurveToPoint: CGPointMake(351.65, 996.9) controlPoint1: CGPointMake(368.05, 1023.94) controlPoint2: CGPointMake(354.45, 1012.6)];
        [bezierPath addCurveToPoint: CGPointMake(372.85, 960.51) controlPoint1: CGPointMake(348.85, 981.19) controlPoint2: CGPointMake(357.85, 965.88)];
        [bezierPath addCurveToPoint: CGPointMake(500.95, 861.29) controlPoint1: CGPointMake(435.25, 938.14) controlPoint2: CGPointMake(477.25, 905.63)];
        [bezierPath addLineToPoint: CGPointMake(500.95, 523.87)];
        [bezierPath addCurveToPoint: CGPointMake(243.75, 34.04) controlPoint1: CGPointMake(343.55, 504.08) controlPoint2: CGPointMake(257.05, 339.45)];
        [bezierPath addLineToPoint: CGPointMake(242.55, 5.9)];
        [bezierPath addLineToPoint: CGPointMake(787.95, 5.9)];
        [bezierPath addLineToPoint: CGPointMake(787.95, 5.9)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSpecialsIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Dollar Sign Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 521.63, 478.69);
        CGContextRotateCTM(context, 35.99 * M_PI / 180);

        CGRect dollarSignRect = CGRectMake(-117.02, -189.62, 234.04, 379.25);
        NSMutableParagraphStyle* dollarSignStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        dollarSignStyle.alignment = NSTextAlignmentLeft;

        NSDictionary* dollarSignFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"MyriadPro-Bold" size: 408.65], NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: dollarSignStyle};

        [@"$" drawInRect: dollarSignRect withAttributes: dollarSignFontAttributes];

        CGContextRestoreGState(context);


        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(720.35, 252.41)];
        [bezierPath addCurveToPoint: CGPointMake(691.15, 243.81) controlPoint1: CGPointMake(709.95, 252.41) controlPoint2: CGPointMake(699.85, 249.41)];
        [bezierPath addCurveToPoint: CGPointMake(667.65, 209.91) controlPoint1: CGPointMake(679.05, 236.01) controlPoint2: CGPointMake(670.65, 223.91)];
        [bezierPath addCurveToPoint: CGPointMake(675.05, 169.31) controlPoint1: CGPointMake(664.65, 195.81) controlPoint2: CGPointMake(667.25, 181.41)];
        [bezierPath addCurveToPoint: CGPointMake(720.45, 144.61) controlPoint1: CGPointMake(685.05, 153.81) controlPoint2: CGPointMake(701.95, 144.61)];
        [bezierPath addCurveToPoint: CGPointMake(749.65, 153.21) controlPoint1: CGPointMake(730.85, 144.61) controlPoint2: CGPointMake(740.95, 147.61)];
        [bezierPath addCurveToPoint: CGPointMake(765.75, 227.81) controlPoint1: CGPointMake(774.65, 169.31) controlPoint2: CGPointMake(781.85, 202.81)];
        [bezierPath addCurveToPoint: CGPointMake(720.35, 252.41) controlPoint1: CGPointMake(755.75, 243.21) controlPoint2: CGPointMake(738.85, 252.41)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(720.45, 167.91)];
        [bezierPath addCurveToPoint: CGPointMake(694.75, 181.91) controlPoint1: CGPointMake(710.05, 167.91) controlPoint2: CGPointMake(700.45, 173.11)];
        [bezierPath addCurveToPoint: CGPointMake(690.55, 204.91) controlPoint1: CGPointMake(690.35, 188.81) controlPoint2: CGPointMake(688.85, 196.91)];
        [bezierPath addCurveToPoint: CGPointMake(703.85, 224.11) controlPoint1: CGPointMake(692.25, 212.91) controlPoint2: CGPointMake(696.95, 219.71)];
        [bezierPath addCurveToPoint: CGPointMake(746.05, 215.01) controlPoint1: CGPointMake(717.65, 233.01) controlPoint2: CGPointMake(737.25, 228.61)];
        [bezierPath addCurveToPoint: CGPointMake(736.95, 172.81) controlPoint1: CGPointMake(755.15, 200.91) controlPoint2: CGPointMake(751.05, 181.91)];
        [bezierPath addCurveToPoint: CGPointMake(720.45, 167.91) controlPoint1: CGPointMake(732.05, 169.61) controlPoint2: CGPointMake(726.35, 167.91)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(504.75, 1019.01)];
        [bezierPath addCurveToPoint: CGPointMake(455.75, 989.51) controlPoint1: CGPointMake(484.15, 1019.01) controlPoint2: CGPointMake(465.35, 1007.71)];
        [bezierPath addLineToPoint: CGPointMake(345.15, 780.51)];
        [bezierPath addLineToPoint: CGPointMake(109.05, 766.11)];
        [bezierPath addCurveToPoint: CGPointMake(63.05, 735.81) controlPoint1: CGPointMake(89.25, 764.81) controlPoint2: CGPointMake(72.05, 753.51)];
        [bezierPath addCurveToPoint: CGPointMake(65.95, 680.71) controlPoint1: CGPointMake(54.05, 718.01) controlPoint2: CGPointMake(55.15, 697.51)];
        [bezierPath addLineToPoint: CGPointMake(470.65, 53.01)];
        [bezierPath addCurveToPoint: CGPointMake(521.55, 22.51) controlPoint1: CGPointMake(481.85, 35.61) controlPoint2: CGPointMake(500.95, 24.21)];
        [bezierPath addLineToPoint: CGPointMake(799.85, 0.21)];
        [bezierPath addCurveToPoint: CGPointMake(868.15, 44.31) controlPoint1: CGPointMake(829.95, -2.19) controlPoint2: CGPointMake(858.05, 16.11)];
        [bezierPath addLineToPoint: CGPointMake(962.65, 307.11)];
        [bezierPath addCurveToPoint: CGPointMake(955.95, 366.01) controlPoint1: CGPointMake(969.65, 326.61) controlPoint2: CGPointMake(967.15, 348.61)];
        [bezierPath addLineToPoint: CGPointMake(551.35, 993.61)];
        [bezierPath addCurveToPoint: CGPointMake(504.75, 1019.01) controlPoint1: CGPointMake(541.05, 1009.51) controlPoint2: CGPointMake(523.65, 1019.01)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(805.25, 46.91)];
        [bezierPath addCurveToPoint: CGPointMake(803.65, 47.01) controlPoint1: CGPointMake(804.75, 46.91) controlPoint2: CGPointMake(804.15, 46.91)];
        [bezierPath addLineToPoint: CGPointMake(525.25, 69.31)];
        [bezierPath addCurveToPoint: CGPointMake(509.95, 78.41) controlPoint1: CGPointMake(519.05, 69.81) controlPoint2: CGPointMake(513.35, 73.21)];
        [bezierPath addLineToPoint: CGPointMake(105.35, 706.11)];
        [bezierPath addCurveToPoint: CGPointMake(104.95, 714.61) controlPoint1: CGPointMake(103.05, 709.71) controlPoint2: CGPointMake(104.05, 713.01)];
        [bezierPath addCurveToPoint: CGPointMake(112.05, 719.31) controlPoint1: CGPointMake(105.75, 716.21) controlPoint2: CGPointMake(107.75, 719.01)];
        [bezierPath addLineToPoint: CGPointMake(374.35, 735.31)];
        [bezierPath addLineToPoint: CGPointMake(497.25, 967.61)];
        [bezierPath addCurveToPoint: CGPointMake(504.85, 972.11) controlPoint1: CGPointMake(499.45, 971.71) controlPoint2: CGPointMake(503.25, 972.11)];
        [bezierPath addCurveToPoint: CGPointMake(512.05, 968.21) controlPoint1: CGPointMake(506.55, 972.11) controlPoint2: CGPointMake(509.85, 971.61)];
        [bezierPath addLineToPoint: CGPointMake(916.65, 340.61)];
        [bezierPath addCurveToPoint: CGPointMake(918.65, 322.91) controlPoint1: CGPointMake(920.05, 335.41) controlPoint2: CGPointMake(920.75, 328.81)];
        [bezierPath addLineToPoint: CGPointMake(824.15, 60.11)];
        [bezierPath addCurveToPoint: CGPointMake(805.25, 46.91) controlPoint1: CGPointMake(821.25, 52.21) controlPoint2: CGPointMake(813.65, 46.91)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSpotIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(511.52, 1017.53)];
        [bezierPath addLineToPoint: CGPointMake(240.82, 488.83)];
        [bezierPath addCurveToPoint: CGPointMake(191.72, 319.23) controlPoint1: CGPointMake(208.72, 438.03) controlPoint2: CGPointMake(191.72, 379.37)];
        [bezierPath addCurveToPoint: CGPointMake(512.82, 0) controlPoint1: CGPointMake(191.72, 143.16) controlPoint2: CGPointMake(335.82, 0)];
        [bezierPath addCurveToPoint: CGPointMake(833.92, 319.23) controlPoint1: CGPointMake(689.82, 0) controlPoint2: CGPointMake(833.92, 143.26)];
        [bezierPath addCurveToPoint: CGPointMake(785.02, 488.53) controlPoint1: CGPointMake(833.92, 379.27) controlPoint2: CGPointMake(817.02, 437.83)];
        [bezierPath addLineToPoint: CGPointMake(511.52, 1017.53)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(512.82, 46.43)];
        [bezierPath addCurveToPoint: CGPointMake(238.42, 319.23) controlPoint1: CGPointMake(361.52, 46.43) controlPoint2: CGPointMake(238.42, 168.81)];
        [bezierPath addCurveToPoint: CGPointMake(280.92, 464.87) controlPoint1: CGPointMake(238.42, 370.92) controlPoint2: CGPointMake(253.12, 421.33)];
        [bezierPath addLineToPoint: CGPointMake(282.02, 466.76)];
        [bezierPath addLineToPoint: CGPointMake(511.82, 915.43)];
        [bezierPath addLineToPoint: CGPointMake(744.92, 464.57)];
        [bezierPath addCurveToPoint: CGPointMake(787.22, 319.23) controlPoint1: CGPointMake(772.62, 421.03) controlPoint2: CGPointMake(787.22, 370.72)];
        [bezierPath addCurveToPoint: CGPointMake(512.82, 46.43) controlPoint1: CGPointMake(787.12, 168.81) controlPoint2: CGPointMake(664.12, 46.43)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(517.82, 456.42)];
        [bezierPath addCurveToPoint: CGPointMake(403.92, 343.19) controlPoint1: CGPointMake(455.02, 456.42) controlPoint2: CGPointMake(403.92, 405.62)];
        [bezierPath addCurveToPoint: CGPointMake(517.82, 229.85) controlPoint1: CGPointMake(403.92, 280.75) controlPoint2: CGPointMake(455.02, 229.85)];
        [bezierPath addCurveToPoint: CGPointMake(631.72, 343.19) controlPoint1: CGPointMake(580.62, 229.85) controlPoint2: CGPointMake(631.72, 280.65)];
        [bezierPath addCurveToPoint: CGPointMake(517.82, 456.42) controlPoint1: CGPointMake(631.72, 405.72) controlPoint2: CGPointMake(580.62, 456.42)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(517.82, 264.65)];
        [bezierPath addCurveToPoint: CGPointMake(438.92, 343.09) controlPoint1: CGPointMake(474.32, 264.65) controlPoint2: CGPointMake(438.92, 299.84)];
        [bezierPath addCurveToPoint: CGPointMake(517.82, 421.53) controlPoint1: CGPointMake(438.92, 386.33) controlPoint2: CGPointMake(474.32, 421.53)];
        [bezierPath addCurveToPoint: CGPointMake(596.72, 343.09) controlPoint1: CGPointMake(561.32, 421.53) controlPoint2: CGPointMake(596.72, 386.33)];
        [bezierPath addCurveToPoint: CGPointMake(517.82, 264.65) controlPoint1: CGPointMake(596.72, 299.84) controlPoint2: CGPointMake(561.32, 264.65)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawCocktailIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(548.5, 588.92)];
        [bezierPath addLineToPoint: CGPointMake(919, 202.6)];
        [bezierPath addLineToPoint: CGPointMake(716.2, 202.6)];
        [bezierPath addLineToPoint: CGPointMake(769.6, 146.96)];
        [bezierPath addCurveToPoint: CGPointMake(821.8, 132.17) controlPoint1: CGPointMake(786.6, 151.85) controlPoint2: CGPointMake(807, 146.86)];
        [bezierPath addCurveToPoint: CGPointMake(836.1, 77.52) controlPoint1: CGPointMake(837.2, 116.69) controlPoint2: CGPointMake(842.2, 95.11)];
        [bezierPath addLineToPoint: CGPointMake(889.3, 21.98)];
        [bezierPath addLineToPoint: CGPointMake(866.1, 0)];
        [bezierPath addLineToPoint: CGPointMake(814.6, 53.75)];
        [bezierPath addCurveToPoint: CGPointMake(755.5, 65.84) controlPoint1: CGPointMake(796.4, 44.86) controlPoint2: CGPointMake(772.4, 48.95)];
        [bezierPath addCurveToPoint: CGPointMake(744.3, 127.08) controlPoint1: CGPointMake(738, 83.42) controlPoint2: CGPointMake(734.1, 108.69)];
        [bezierPath addLineToPoint: CGPointMake(672, 202.6)];
        [bezierPath addLineToPoint: CGPointMake(130, 202.6)];
        [bezierPath addLineToPoint: CGPointMake(500.6, 588.92)];
        [bezierPath addLineToPoint: CGPointMake(500.6, 914.31)];
        [bezierPath addLineToPoint: CGPointMake(321.6, 991.93)];
        [bezierPath addCurveToPoint: CGPointMake(727.6, 991.93) controlPoint1: CGPointMake(321.6, 991.93) controlPoint2: CGPointMake(523.5, 1063.76)];
        [bezierPath addLineToPoint: CGPointMake(548.6, 914.31)];
        [bezierPath addLineToPoint: CGPointMake(548.6, 588.92)];
        [bezierPath addLineToPoint: CGPointMake(548.5, 588.92)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(578.1, 300.41)];
        [bezierPath addLineToPoint: CGPointMake(498.8, 383.23)];
        [bezierPath addLineToPoint: CGPointMake(521.8, 405.3)];
        [bezierPath addLineToPoint: CGPointMake(622.4, 300.51)];
        [bezierPath addLineToPoint: CGPointMake(764.1, 300.51)];
        [bezierPath addLineToPoint: CGPointMake(524.6, 550.06)];
        [bezierPath addLineToPoint: CGPointMake(285.1, 300.41)];
        [bezierPath addLineToPoint: CGPointMake(578.1, 300.41)];
        [bezierPath closePath];
        bezierPath.miterLimit = 4;

        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawBeerIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(577.47, 719.47)];
        [bezierPath addCurveToPoint: CGPointMake(577.47, 740.1) controlPoint1: CGPointMake(583.17, 725.17) controlPoint2: CGPointMake(583.17, 734.4)];
        [bezierPath addCurveToPoint: CGPointMake(556.82, 740.1) controlPoint1: CGPointMake(571.77, 745.8) controlPoint2: CGPointMake(562.52, 745.8)];
        [bezierPath addCurveToPoint: CGPointMake(556.82, 719.47) controlPoint1: CGPointMake(551.12, 734.4) controlPoint2: CGPointMake(551.12, 725.17)];
        [bezierPath addCurveToPoint: CGPointMake(577.47, 719.47) controlPoint1: CGPointMake(562.52, 713.78) controlPoint2: CGPointMake(571.77, 713.78)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(611.87, 573.11)];
        [bezierPath addCurveToPoint: CGPointMake(611.87, 592.75) controlPoint1: CGPointMake(617.3, 578.53) controlPoint2: CGPointMake(617.3, 587.33)];
        [bezierPath addCurveToPoint: CGPointMake(592.21, 592.75) controlPoint1: CGPointMake(606.44, 598.17) controlPoint2: CGPointMake(597.64, 598.17)];
        [bezierPath addCurveToPoint: CGPointMake(592.21, 573.11) controlPoint1: CGPointMake(586.79, 587.33) controlPoint2: CGPointMake(586.79, 578.53)];
        [bezierPath addCurveToPoint: CGPointMake(611.87, 573.11) controlPoint1: CGPointMake(597.64, 567.69) controlPoint2: CGPointMake(606.44, 567.69)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(555.65, 452.06)];
        [bezierPath addCurveToPoint: CGPointMake(555.65, 468.44) controlPoint1: CGPointMake(560.18, 456.58) controlPoint2: CGPointMake(560.18, 463.92)];
        [bezierPath addCurveToPoint: CGPointMake(539.24, 468.44) controlPoint1: CGPointMake(551.12, 472.97) controlPoint2: CGPointMake(543.77, 472.97)];
        [bezierPath addCurveToPoint: CGPointMake(539.24, 452.06) controlPoint1: CGPointMake(534.71, 463.92) controlPoint2: CGPointMake(534.71, 456.58)];
        [bezierPath addCurveToPoint: CGPointMake(555.65, 452.06) controlPoint1: CGPointMake(543.77, 447.53) controlPoint2: CGPointMake(551.12, 447.53)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(609.35, 283.81)];
        [bezierPath addCurveToPoint: CGPointMake(609.35, 313.2) controlPoint1: CGPointMake(617.47, 291.93) controlPoint2: CGPointMake(617.47, 305.09)];
        [bezierPath addCurveToPoint: CGPointMake(579.94, 313.2) controlPoint1: CGPointMake(601.23, 321.32) controlPoint2: CGPointMake(588.06, 321.32)];
        [bezierPath addCurveToPoint: CGPointMake(579.94, 283.81) controlPoint1: CGPointMake(571.81, 305.09) controlPoint2: CGPointMake(571.81, 291.93)];
        [bezierPath addCurveToPoint: CGPointMake(609.35, 283.81) controlPoint1: CGPointMake(588.06, 275.7) controlPoint2: CGPointMake(601.23, 275.7)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(723.84, 46.35)];
        [bezierPath addLineToPoint: CGPointMake(300.24, 46.35)];
        [bezierPath addCurveToPoint: CGPointMake(273.57, 149.83) controlPoint1: CGPointMake(287.56, 84.6) controlPoint2: CGPointMake(278.91, 118.75)];
        [bezierPath addCurveToPoint: CGPointMake(743.03, 146.44) controlPoint1: CGPointMake(349.01, 149.29) controlPoint2: CGPointMake(653.45, 147.08)];
        [bezierPath addCurveToPoint: CGPointMake(723.84, 46.35) controlPoint1: CGPointMake(739.48, 116.25) controlPoint2: CGPointMake(733.29, 83.17)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(746.42, 188.77)];
        [bezierPath addCurveToPoint: CGPointMake(268.1, 192.23) controlPoint1: CGPointMake(658.66, 189.41) controlPoint2: CGPointMake(333.15, 191.76)];
        [bezierPath addCurveToPoint: CGPointMake(319.94, 437.47) controlPoint1: CGPointMake(259.84, 291.27) controlPoint2: CGPointMake(287.55, 358.7)];
        [bezierPath addCurveToPoint: CGPointMake(372.34, 981.14) controlPoint1: CGPointMake(369.24, 557.56) controlPoint2: CGPointMake(425.04, 693.12)];
        [bezierPath addLineToPoint: CGPointMake(658.24, 981.14)];
        [bezierPath addCurveToPoint: CGPointMake(697.84, 425.18) controlPoint1: CGPointMake(601.64, 681.33) controlPoint2: CGPointMake(652.74, 545.47)];
        [bezierPath addCurveToPoint: CGPointMake(746.42, 188.77) controlPoint1: CGPointMake(725.36, 351.96) controlPoint2: CGPointMake(750.32, 285.53)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(756.44, 4)];
        [bezierPath addCurveToPoint: CGPointMake(760.74, 19.58) controlPoint1: CGPointMake(756.44, 4) controlPoint2: CGPointMake(760.74, 19.58)];
        [bezierPath addCurveToPoint: CGPointMake(737.64, 440.07) controlPoint1: CGPointMake(817.54, 227.28) controlPoint2: CGPointMake(778.74, 330.68)];
        [bezierPath addCurveToPoint: CGPointMake(704.84, 998.12) controlPoint1: CGPointMake(693.24, 558.35) controlPoint2: CGPointMake(642.84, 692.42)];
        [bezierPath addLineToPoint: CGPointMake(709.94, 1023.5)];
        [bezierPath addLineToPoint: CGPointMake(320.94, 1023.5)];
        [bezierPath addLineToPoint: CGPointMake(326.04, 998.22)];
        [bezierPath addCurveToPoint: CGPointMake(280.74, 453.56) controlPoint1: CGPointMake(384.24, 705.31) controlPoint2: CGPointMake(329.24, 571.54)];
        [bezierPath addCurveToPoint: CGPointMake(265.04, 18.18) controlPoint1: CGPointMake(234.14, 340.17) controlPoint2: CGPointMake(190.14, 233.17)];
        [bezierPath addLineToPoint: CGPointMake(270.04, 4)];
        [bezierPath addLineToPoint: CGPointMake(756.44, 4)];
        [bezierPath addLineToPoint: CGPointMake(756.44, 4)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawNavigationArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName rotation: (CGFloat)rotation;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Scaling Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Rotating Group
        {
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 514.37, 509.2);
            CGContextRotateCTM(context, -rotation * M_PI / 180);



            //// Bezier Drawing
            UIBezierPath* bezierPath = UIBezierPath.bezierPath;
            [bezierPath moveToPoint: CGPointMake(-194.13, -512)];
            [bezierPath addLineToPoint: CGPointMake(-221.73, -489.2)];
            [bezierPath addLineToPoint: CGPointMake(180.07, -2.8)];
            [bezierPath addLineToPoint: CGPointMake(-221.73, 483.6)];
            [bezierPath addLineToPoint: CGPointMake(-194.13, 506.4)];
            [bezierPath addLineToPoint: CGPointMake(226.47, -2.8)];
            [bezierPath addLineToPoint: CGPointMake(-194.13, -512)];
            [bezierPath closePath];
            bezierPath.miterLimit = 4;

            [strokeColor setFill];
            [bezierPath fill];



            CGContextRestoreGState(context);
        }



        CGContextRestoreGState(context);
    }
}

+ (void)drawSearchIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(416.3, 47)];
        [bezierPath addCurveToPoint: CGPointMake(67.1, 396.2) controlPoint1: CGPointMake(223.7, 47) controlPoint2: CGPointMake(67.1, 203.7)];
        [bezierPath addCurveToPoint: CGPointMake(416.3, 745.4) controlPoint1: CGPointMake(67.1, 588.7) controlPoint2: CGPointMake(223.7, 745.4)];
        [bezierPath addCurveToPoint: CGPointMake(765.5, 396.2) controlPoint1: CGPointMake(608.9, 745.4) controlPoint2: CGPointMake(765.5, 588.8)];
        [bezierPath addCurveToPoint: CGPointMake(416.3, 47) controlPoint1: CGPointMake(765.5, 203.6) controlPoint2: CGPointMake(608.8, 47)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(810.6, 396.3)];
        [bezierPath addCurveToPoint: CGPointMake(738.01, 624) controlPoint1: CGPointMake(810.6, 481.06) controlPoint2: CGPointMake(783.71, 559.65)];
        [bezierPath addCurveToPoint: CGPointMake(1001.9, 913.6) controlPoint1: CGPointMake(785.44, 676.04) controlPoint2: CGPointMake(1001.9, 913.6)];
        [bezierPath addLineToPoint: CGPointMake(885.3, 1019.9)];
        [bezierPath addCurveToPoint: CGPointMake(622.91, 731.94) controlPoint1: CGPointMake(885.3, 1019.9) controlPoint2: CGPointMake(673.21, 787.15)];
        [bezierPath addCurveToPoint: CGPointMake(416.3, 790.5) controlPoint1: CGPointMake(562.79, 769.06) controlPoint2: CGPointMake(492, 790.5)];
        [bezierPath addCurveToPoint: CGPointMake(22, 396.2) controlPoint1: CGPointMake(198.9, 790.5) controlPoint2: CGPointMake(22, 613.6)];
        [bezierPath addCurveToPoint: CGPointMake(416.3, 2) controlPoint1: CGPointMake(22, 178.8) controlPoint2: CGPointMake(198.9, 2)];
        [bezierPath addCurveToPoint: CGPointMake(810.6, 396.3) controlPoint1: CGPointMake(633.7, 2) controlPoint2: CGPointMake(810.6, 178.9)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawSpotSideBarIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(739.81, 158.78)];
        [bezierPath addCurveToPoint: CGPointMake(838.38, 158.78) controlPoint1: CGPointMake(739.81, 158.78) controlPoint2: CGPointMake(838.38, 158.78)];
        [bezierPath addCurveToPoint: CGPointMake(947.34, 158.78) controlPoint1: CGPointMake(890.79, 158.78) controlPoint2: CGPointMake(945.64, 158.78)];
        [bezierPath addCurveToPoint: CGPointMake(947.38, 246.44) controlPoint1: CGPointMake(947.38, 158.78) controlPoint2: CGPointMake(947.38, 246.44)];
        [bezierPath addLineToPoint: CGPointMake(776.47, 246.44)];
        [bezierPath addCurveToPoint: CGPointMake(739.81, 158.78) controlPoint1: CGPointMake(768.63, 215.16) controlPoint2: CGPointMake(756.15, 185.68)];
        [bezierPath addLineToPoint: CGPointMake(739.81, 158.78)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(785.77, 312.18)];
        [bezierPath addCurveToPoint: CGPointMake(794.38, 312.18) controlPoint1: CGPointMake(785.77, 312.18) controlPoint2: CGPointMake(794.38, 312.18)];
        [bezierPath addCurveToPoint: CGPointMake(947.33, 312.18) controlPoint1: CGPointMake(825.69, 312.18) controlPoint2: CGPointMake(944.55, 312.18)];
        [bezierPath addCurveToPoint: CGPointMake(947.38, 399.84) controlPoint1: CGPointMake(947.38, 312.18) controlPoint2: CGPointMake(947.38, 399.84)];
        [bezierPath addLineToPoint: CGPointMake(776.82, 399.84)];
        [bezierPath addCurveToPoint: CGPointMake(785.98, 323.83) controlPoint1: CGPointMake(782.88, 375.11) controlPoint2: CGPointMake(785.98, 349.61)];
        [bezierPath addCurveToPoint: CGPointMake(785.77, 312.18) controlPoint1: CGPointMake(785.98, 319.93) controlPoint2: CGPointMake(785.91, 316.05)];
        [bezierPath addLineToPoint: CGPointMake(785.77, 312.18)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(402.88, 269.15)];
        [bezierPath addCurveToPoint: CGPointMake(323.98, 347.74) controlPoint1: CGPointMake(359.38, 269.15) controlPoint2: CGPointMake(323.98, 304.41)];
        [bezierPath addCurveToPoint: CGPointMake(402.88, 426.33) controlPoint1: CGPointMake(323.98, 391.07) controlPoint2: CGPointMake(359.38, 426.33)];
        [bezierPath addCurveToPoint: CGPointMake(481.78, 347.74) controlPoint1: CGPointMake(446.38, 426.33) controlPoint2: CGPointMake(481.78, 391.07)];
        [bezierPath addCurveToPoint: CGPointMake(402.88, 269.15) controlPoint1: CGPointMake(481.78, 304.41) controlPoint2: CGPointMake(446.38, 269.15)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(516.78, 347.84)];
        [bezierPath addCurveToPoint: CGPointMake(402.88, 461.3) controlPoint1: CGPointMake(516.78, 410.5) controlPoint2: CGPointMake(465.68, 461.3)];
        [bezierPath addCurveToPoint: CGPointMake(288.98, 347.84) controlPoint1: CGPointMake(340.08, 461.3) controlPoint2: CGPointMake(288.98, 410.4)];
        [bezierPath addCurveToPoint: CGPointMake(402.88, 234.28) controlPoint1: CGPointMake(288.98, 285.29) controlPoint2: CGPointMake(340.08, 234.28)];
        [bezierPath addCurveToPoint: CGPointMake(516.78, 347.84) controlPoint1: CGPointMake(465.68, 234.28) controlPoint2: CGPointMake(516.78, 285.19)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(947.38, 465.58)];
        [bezierPath addCurveToPoint: CGPointMake(947.38, 553.24) controlPoint1: CGPointMake(947.38, 465.58) controlPoint2: CGPointMake(947.38, 553.24)];
        [bezierPath addLineToPoint: CGPointMake(706.24, 553.24)];
        [bezierPath addCurveToPoint: CGPointMake(737.08, 493.47) controlPoint1: CGPointMake(725.14, 516.62) controlPoint2: CGPointMake(737.08, 493.47)];
        [bezierPath addCurveToPoint: CGPointMake(752.75, 465.58) controlPoint1: CGPointMake(742.79, 484.41) controlPoint2: CGPointMake(748.01, 475.1)];
        [bezierPath addCurveToPoint: CGPointMake(947.38, 465.58) controlPoint1: CGPointMake(767.9, 465.58) controlPoint2: CGPointMake(947.38, 465.58)];
        [bezierPath addLineToPoint: CGPointMake(947.38, 465.58)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(947.16, 605.04)];
        [bezierPath addCurveToPoint: CGPointMake(947.38, 692.69) controlPoint1: CGPointMake(947.38, 605.04) controlPoint2: CGPointMake(947.38, 692.69)];
        [bezierPath addLineToPoint: CGPointMake(634.28, 692.69)];
        [bezierPath addCurveToPoint: CGPointMake(679.51, 605.04) controlPoint1: CGPointMake(650.35, 661.56) controlPoint2: CGPointMake(665.75, 631.71)];
        [bezierPath addCurveToPoint: CGPointMake(947.16, 605.04) controlPoint1: CGPointMake(697.48, 605.04) controlPoint2: CGPointMake(938.73, 605.04)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(463.68, 920.8)];
        [bezierPath addCurveToPoint: CGPointMake(464.09, 920.8) controlPoint1: CGPointMake(463.68, 920.8) controlPoint2: CGPointMake(464.09, 920.8)];
        [bezierPath addCurveToPoint: CGPointMake(463.88, 921.2) controlPoint1: CGPointMake(463.95, 921.07) controlPoint2: CGPointMake(463.88, 921.2)];
        [bezierPath addCurveToPoint: CGPointMake(463.68, 920.8) controlPoint1: CGPointMake(463.88, 921.2) controlPoint2: CGPointMake(463.81, 921.07)];
        [bezierPath addLineToPoint: CGPointMake(463.68, 920.8)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(397.88, 50.5)];
        [bezierPath addCurveToPoint: CGPointMake(123.48, 323.83) controlPoint1: CGPointMake(246.58, 50.5) controlPoint2: CGPointMake(123.48, 173.12)];
        [bezierPath addCurveToPoint: CGPointMake(165.98, 469.76) controlPoint1: CGPointMake(123.48, 375.63) controlPoint2: CGPointMake(138.18, 426.13)];
        [bezierPath addLineToPoint: CGPointMake(167.08, 471.66)];
        [bezierPath addLineToPoint: CGPointMake(396.88, 921.2)];
        [bezierPath addLineToPoint: CGPointMake(629.98, 469.47)];
        [bezierPath addCurveToPoint: CGPointMake(672.28, 323.83) controlPoint1: CGPointMake(657.68, 425.84) controlPoint2: CGPointMake(672.28, 375.43)];
        [bezierPath addCurveToPoint: CGPointMake(397.88, 50.5) controlPoint1: CGPointMake(672.18, 173.12) controlPoint2: CGPointMake(549.18, 50.5)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(718.98, 323.83)];
        [bezierPath addCurveToPoint: CGPointMake(670.08, 493.47) controlPoint1: CGPointMake(718.98, 384) controlPoint2: CGPointMake(702.08, 442.67)];
        [bezierPath addLineToPoint: CGPointMake(396.58, 1023.5)];
        [bezierPath addLineToPoint: CGPointMake(125.88, 493.77)];
        [bezierPath addCurveToPoint: CGPointMake(76.78, 323.83) controlPoint1: CGPointMake(93.78, 442.87) controlPoint2: CGPointMake(76.78, 384.1)];
        [bezierPath addCurveToPoint: CGPointMake(397.88, 3.98) controlPoint1: CGPointMake(76.78, 147.42) controlPoint2: CGPointMake(220.88, 3.98)];
        [bezierPath addCurveToPoint: CGPointMake(718.98, 323.83) controlPoint1: CGPointMake(574.88, 3.98) controlPoint2: CGPointMake(718.98, 147.52)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawFeaturedListIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(707.24, 161.31)];
        [bezierPath addCurveToPoint: CGPointMake(805.81, 161.31) controlPoint1: CGPointMake(707.24, 161.31) controlPoint2: CGPointMake(805.81, 161.31)];
        [bezierPath addCurveToPoint: CGPointMake(914.77, 161.31) controlPoint1: CGPointMake(858.22, 161.31) controlPoint2: CGPointMake(913.06, 161.31)];
        [bezierPath addCurveToPoint: CGPointMake(914.81, 249.31) controlPoint1: CGPointMake(914.81, 161.31) controlPoint2: CGPointMake(914.81, 249.31)];
        [bezierPath addLineToPoint: CGPointMake(743.89, 249.31)];
        [bezierPath addCurveToPoint: CGPointMake(707.24, 161.31) controlPoint1: CGPointMake(736.06, 217.9) controlPoint2: CGPointMake(723.58, 188.31)];
        [bezierPath addLineToPoint: CGPointMake(707.24, 161.31)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(753.2, 315.31)];
        [bezierPath addCurveToPoint: CGPointMake(761.81, 315.31) controlPoint1: CGPointMake(753.2, 315.31) controlPoint2: CGPointMake(761.81, 315.31)];
        [bezierPath addCurveToPoint: CGPointMake(914.76, 315.31) controlPoint1: CGPointMake(793.11, 315.31) controlPoint2: CGPointMake(911.98, 315.31)];
        [bezierPath addCurveToPoint: CGPointMake(914.81, 403.31) controlPoint1: CGPointMake(914.81, 315.31) controlPoint2: CGPointMake(914.81, 403.31)];
        [bezierPath addLineToPoint: CGPointMake(744.24, 403.31)];
        [bezierPath addCurveToPoint: CGPointMake(753.41, 327.01) controlPoint1: CGPointMake(750.3, 378.48) controlPoint2: CGPointMake(753.41, 352.88)];
        [bezierPath addCurveToPoint: CGPointMake(753.2, 315.31) controlPoint1: CGPointMake(753.41, 323.09) controlPoint2: CGPointMake(753.34, 319.19)];
        [bezierPath addLineToPoint: CGPointMake(753.2, 315.31)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(336.55, 297.55)];
        [bezierPath addCurveToPoint: CGPointMake(336.55, 430.06) controlPoint1: CGPointMake(299.96, 334.14) controlPoint2: CGPointMake(299.96, 393.47)];
        [bezierPath addCurveToPoint: CGPointMake(469.06, 430.06) controlPoint1: CGPointMake(373.14, 466.65) controlPoint2: CGPointMake(432.47, 466.65)];
        [bezierPath addCurveToPoint: CGPointMake(469.06, 297.55) controlPoint1: CGPointMake(505.65, 393.47) controlPoint2: CGPointMake(505.65, 334.14)];
        [bezierPath addCurveToPoint: CGPointMake(336.55, 297.55) controlPoint1: CGPointMake(432.47, 260.96) controlPoint2: CGPointMake(373.14, 260.96)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(914.81, 469.31)];
        [bezierPath addCurveToPoint: CGPointMake(914.81, 557.31) controlPoint1: CGPointMake(914.81, 469.31) controlPoint2: CGPointMake(914.81, 557.31)];
        [bezierPath addLineToPoint: CGPointMake(673.67, 557.31)];
        [bezierPath addCurveToPoint: CGPointMake(704.51, 497.31) controlPoint1: CGPointMake(692.56, 520.54) controlPoint2: CGPointMake(704.51, 497.31)];
        [bezierPath addCurveToPoint: CGPointMake(720.17, 469.31) controlPoint1: CGPointMake(710.21, 488.21) controlPoint2: CGPointMake(715.44, 478.87)];
        [bezierPath addCurveToPoint: CGPointMake(914.81, 469.31) controlPoint1: CGPointMake(735.32, 469.31) controlPoint2: CGPointMake(914.81, 469.31)];
        [bezierPath addLineToPoint: CGPointMake(914.81, 469.31)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(914.58, 609.31)];
        [bezierPath addCurveToPoint: CGPointMake(914.81, 697.31) controlPoint1: CGPointMake(914.81, 609.31) controlPoint2: CGPointMake(914.81, 697.31)];
        [bezierPath addLineToPoint: CGPointMake(601.71, 697.31)];
        [bezierPath addCurveToPoint: CGPointMake(646.94, 609.31) controlPoint1: CGPointMake(617.77, 666.05) controlPoint2: CGPointMake(633.17, 636.09)];
        [bezierPath addCurveToPoint: CGPointMake(914.58, 609.31) controlPoint1: CGPointMake(664.9, 609.31) controlPoint2: CGPointMake(906.16, 609.31)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(431.1, 926.31)];
        [bezierPath addCurveToPoint: CGPointMake(431.51, 926.31) controlPoint1: CGPointMake(431.1, 926.31) controlPoint2: CGPointMake(431.51, 926.31)];
        [bezierPath addCurveToPoint: CGPointMake(431.31, 926.71) controlPoint1: CGPointMake(431.38, 926.57) controlPoint2: CGPointMake(431.31, 926.71)];
        [bezierPath addCurveToPoint: CGPointMake(431.1, 926.31) controlPoint1: CGPointMake(431.31, 926.71) controlPoint2: CGPointMake(431.24, 926.57)];
        [bezierPath addLineToPoint: CGPointMake(431.1, 926.31)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(687.41, 340.51)];
        [bezierPath addCurveToPoint: CGPointMake(642.81, 494.81) controlPoint1: CGPointMake(687.41, 397.21) controlPoint2: CGPointMake(671.01, 450.11)];
        [bezierPath addCurveToPoint: CGPointMake(396.81, 973.51) controlPoint1: CGPointMake(526.51, 654.51) controlPoint2: CGPointMake(445.61, 814.11)];
        [bezierPath addCurveToPoint: CGPointMake(153.21, 495.11) controlPoint1: CGPointMake(340.61, 808.31) controlPoint2: CGPointMake(259.01, 648.91)];
        [bezierPath addCurveToPoint: CGPointMake(108.41, 340.51) controlPoint1: CGPointMake(124.91, 450.41) controlPoint2: CGPointMake(108.41, 397.41)];
        [bezierPath addCurveToPoint: CGPointMake(397.91, 51.01) controlPoint1: CGPointMake(108.41, 180.61) controlPoint2: CGPointMake(238.01, 51.01)];
        [bezierPath addCurveToPoint: CGPointMake(687.41, 340.51) controlPoint1: CGPointMake(557.81, 51.01) controlPoint2: CGPointMake(687.41, 180.61)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName fillColorName: (NSString*)fillColorName rotation: (CGFloat)rotation;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;
    UIColor* fillColor = [fillColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [fillColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [fillColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [fillColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [fillColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [fillColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [fillColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Scaling Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Rotating Group
        {
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 508.6, 512.19);
            CGContextRotateCTM(context, -rotation * M_PI / 180);



            //// Bezier Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, -502, -512);

            UIBezierPath* bezierPath = UIBezierPath.bezierPath;
            [bezierPath moveToPoint: CGPointMake(1007.41, 503.69)];
            [bezierPath addCurveToPoint: CGPointMake(1006.91, 498.29) controlPoint1: CGPointMake(1007.21, 501.89) controlPoint2: CGPointMake(1007.21, 500.09)];
            [bezierPath addCurveToPoint: CGPointMake(985.3, 459.49) controlPoint1: CGPointMake(1004.04, 482.99) controlPoint2: CGPointMake(996.21, 469.59)];
            [bezierPath addLineToPoint: CGPointMake(616.99, 87.19)];
            [bezierPath addCurveToPoint: CGPointMake(517.78, 87.09) controlPoint1: CGPointMake(589.64, 59.49) controlPoint2: CGPointMake(545.13, 59.49)];
            [bezierPath addLineToPoint: CGPointMake(516.79, 88.09)];
            [bezierPath addCurveToPoint: CGPointMake(516.69, 188.19) controlPoint1: CGPointMake(489.33, 115.69) controlPoint2: CGPointMake(489.33, 160.59)];
            [bezierPath addLineToPoint: CGPointMake(766.46, 440.69)];
            [bezierPath addLineToPoint: CGPointMake(70.17, 440.69)];
            [bezierPath addCurveToPoint: CGPointMake(0, 511.49) controlPoint1: CGPointMake(31.42, 440.69) controlPoint2: CGPointMake(0, 472.39)];
            [bezierPath addLineToPoint: CGPointMake(0, 512.89)];
            [bezierPath addCurveToPoint: CGPointMake(70.17, 583.69) controlPoint1: CGPointMake(0, 551.99) controlPoint2: CGPointMake(31.42, 583.69)];
            [bezierPath addLineToPoint: CGPointMake(766.46, 583.69)];
            [bezierPath addLineToPoint: CGPointMake(516.69, 836.19)];
            [bezierPath addCurveToPoint: CGPointMake(516.79, 936.29) controlPoint1: CGPointMake(489.33, 863.89) controlPoint2: CGPointMake(489.33, 908.69)];
            [bezierPath addLineToPoint: CGPointMake(517.78, 937.29)];
            [bezierPath addCurveToPoint: CGPointMake(616.99, 937.19) controlPoint1: CGPointMake(545.23, 964.89) controlPoint2: CGPointMake(589.64, 964.89)];
            [bezierPath addLineToPoint: CGPointMake(985.3, 564.89)];
            [bezierPath addCurveToPoint: CGPointMake(1006.91, 526.09) controlPoint1: CGPointMake(996.21, 554.79) controlPoint2: CGPointMake(1004.04, 541.39)];
            [bezierPath addCurveToPoint: CGPointMake(1007.41, 520.69) controlPoint1: CGPointMake(1007.21, 524.29) controlPoint2: CGPointMake(1007.21, 522.49)];
            [bezierPath addCurveToPoint: CGPointMake(1008.2, 512.89) controlPoint1: CGPointMake(1007.7, 518.09) controlPoint2: CGPointMake(1008.2, 515.59)];
            [bezierPath addLineToPoint: CGPointMake(1008.2, 511.49)];
            [bezierPath addCurveToPoint: CGPointMake(1007.41, 503.69) controlPoint1: CGPointMake(1008.2, 508.79) controlPoint2: CGPointMake(1007.7, 506.29)];
            [bezierPath closePath];
            bezierPath.miterLimit = 4;

            [fillColor setFill];
            [bezierPath fill];
            [strokeColor setStroke];
            bezierPath.lineWidth = 10;
            [bezierPath stroke];

            CGContextRestoreGState(context);



            CGContextRestoreGState(context);
        }



        CGContextRestoreGState(context);
    }
}

+ (void)drawDrinksIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Beer Bezier Drawing
        UIBezierPath* beerBezierPath = UIBezierPath.bezierPath;
        [beerBezierPath moveToPoint: CGPointMake(830.23, 744.91)];
        [beerBezierPath addCurveToPoint: CGPointMake(830.23, 763.68) controlPoint1: CGPointMake(835.41, 750.09) controlPoint2: CGPointMake(835.41, 758.49)];
        [beerBezierPath addCurveToPoint: CGPointMake(811.49, 763.68) controlPoint1: CGPointMake(825.06, 768.86) controlPoint2: CGPointMake(816.67, 768.86)];
        [beerBezierPath addCurveToPoint: CGPointMake(811.49, 744.91) controlPoint1: CGPointMake(806.31, 758.49) controlPoint2: CGPointMake(806.31, 750.09)];
        [beerBezierPath addCurveToPoint: CGPointMake(830.23, 744.91) controlPoint1: CGPointMake(816.67, 739.73) controlPoint2: CGPointMake(825.06, 739.73)];
        [beerBezierPath closePath];
        [beerBezierPath moveToPoint: CGPointMake(861.47, 611.76)];
        [beerBezierPath addCurveToPoint: CGPointMake(861.47, 629.62) controlPoint1: CGPointMake(866.4, 616.69) controlPoint2: CGPointMake(866.4, 624.69)];
        [beerBezierPath addCurveToPoint: CGPointMake(843.62, 629.62) controlPoint1: CGPointMake(856.54, 634.56) controlPoint2: CGPointMake(848.55, 634.56)];
        [beerBezierPath addCurveToPoint: CGPointMake(843.62, 611.76) controlPoint1: CGPointMake(838.7, 624.69) controlPoint2: CGPointMake(838.7, 616.69)];
        [beerBezierPath addCurveToPoint: CGPointMake(861.47, 611.76) controlPoint1: CGPointMake(848.55, 606.82) controlPoint2: CGPointMake(856.54, 606.82)];
        [beerBezierPath closePath];
        [beerBezierPath moveToPoint: CGPointMake(810.42, 501.63)];
        [beerBezierPath addCurveToPoint: CGPointMake(810.42, 516.54) controlPoint1: CGPointMake(814.54, 505.74) controlPoint2: CGPointMake(814.54, 512.42)];
        [beerBezierPath addCurveToPoint: CGPointMake(795.53, 516.54) controlPoint1: CGPointMake(806.31, 520.65) controlPoint2: CGPointMake(799.64, 520.65)];
        [beerBezierPath addCurveToPoint: CGPointMake(795.53, 501.63) controlPoint1: CGPointMake(791.42, 512.42) controlPoint2: CGPointMake(791.42, 505.74)];
        [beerBezierPath addCurveToPoint: CGPointMake(810.42, 501.63) controlPoint1: CGPointMake(799.64, 497.51) controlPoint2: CGPointMake(806.31, 497.51)];
        [beerBezierPath closePath];
        [beerBezierPath moveToPoint: CGPointMake(859.18, 348.57)];
        [beerBezierPath addCurveToPoint: CGPointMake(859.18, 375.3) controlPoint1: CGPointMake(866.56, 355.95) controlPoint2: CGPointMake(866.56, 367.92)];
        [beerBezierPath addCurveToPoint: CGPointMake(832.48, 375.3) controlPoint1: CGPointMake(851.81, 382.68) controlPoint2: CGPointMake(839.85, 382.68)];
        [beerBezierPath addCurveToPoint: CGPointMake(832.48, 348.57) controlPoint1: CGPointMake(825.1, 367.92) controlPoint2: CGPointMake(825.1, 355.95)];
        [beerBezierPath addCurveToPoint: CGPointMake(859.18, 348.57) controlPoint1: CGPointMake(839.85, 341.18) controlPoint2: CGPointMake(851.81, 341.18)];
        [beerBezierPath closePath];
        [beerBezierPath moveToPoint: CGPointMake(963.13, 132.54)];
        [beerBezierPath addLineToPoint: CGPointMake(578.55, 132.54)];
        [beerBezierPath addCurveToPoint: CGPointMake(554.33, 226.67) controlPoint1: CGPointMake(567.03, 167.33) controlPoint2: CGPointMake(559.18, 198.4)];
        [beerBezierPath addCurveToPoint: CGPointMake(980.55, 223.59) controlPoint1: CGPointMake(622.82, 226.18) controlPoint2: CGPointMake(899.22, 224.18)];
        [beerBezierPath addCurveToPoint: CGPointMake(963.13, 132.54) controlPoint1: CGPointMake(977.32, 196.12) controlPoint2: CGPointMake(971.7, 166.03)];
        [beerBezierPath closePath];
        [beerBezierPath moveToPoint: CGPointMake(983.62, 262.1)];
        [beerBezierPath addCurveToPoint: CGPointMake(549.36, 265.25) controlPoint1: CGPointMake(903.95, 262.68) controlPoint2: CGPointMake(608.42, 264.82)];
        [beerBezierPath addCurveToPoint: CGPointMake(596.43, 488.36) controlPoint1: CGPointMake(541.86, 355.35) controlPoint2: CGPointMake(567.02, 416.69)];
        [beerBezierPath addCurveToPoint: CGPointMake(644.01, 982.96) controlPoint1: CGPointMake(641.19, 597.6) controlPoint2: CGPointMake(691.85, 720.94)];
        [beerBezierPath addLineToPoint: CGPointMake(903.57, 982.96)];
        [beerBezierPath addCurveToPoint: CGPointMake(939.52, 477.18) controlPoint1: CGPointMake(852.18, 710.21) controlPoint2: CGPointMake(898.58, 586.61)];
        [beerBezierPath addCurveToPoint: CGPointMake(983.62, 262.1) controlPoint1: CGPointMake(964.51, 410.56) controlPoint2: CGPointMake(987.17, 350.13)];
        [beerBezierPath closePath];
        [beerBezierPath moveToPoint: CGPointMake(992.72, 94)];
        [beerBezierPath addCurveToPoint: CGPointMake(996.63, 108.18) controlPoint1: CGPointMake(992.72, 94) controlPoint2: CGPointMake(996.63, 108.18)];
        [beerBezierPath addCurveToPoint: CGPointMake(975.66, 490.72) controlPoint1: CGPointMake(1048.2, 297.13) controlPoint2: CGPointMake(1012.97, 391.2)];
        [beerBezierPath addCurveToPoint: CGPointMake(945.88, 998.41) controlPoint1: CGPointMake(935.35, 598.33) controlPoint2: CGPointMake(889.59, 720.3)];
        [beerBezierPath addLineToPoint: CGPointMake(950.51, 1021.5)];
        [beerBezierPath addLineToPoint: CGPointMake(597.34, 1021.5)];
        [beerBezierPath addLineToPoint: CGPointMake(601.97, 998.51)];
        [beerBezierPath addCurveToPoint: CGPointMake(560.84, 502.99) controlPoint1: CGPointMake(654.81, 732.03) controlPoint2: CGPointMake(604.88, 610.33)];
        [beerBezierPath addCurveToPoint: CGPointMake(546.59, 106.91) controlPoint1: CGPointMake(518.54, 399.83) controlPoint2: CGPointMake(478.59, 302.49)];
        [beerBezierPath addLineToPoint: CGPointMake(551.13, 94)];
        [beerBezierPath addLineToPoint: CGPointMake(992.72, 94)];
        [beerBezierPath addLineToPoint: CGPointMake(992.72, 94)];
        [beerBezierPath closePath];
        [strokeColor setFill];
        [beerBezierPath fill];


        //// Cocktail Bezier Drawing
        UIBezierPath* cocktailBezierPath = UIBezierPath.bezierPath;
        [cocktailBezierPath moveToPoint: CGPointMake(271.04, 739.85)];
        [cocktailBezierPath addLineToPoint: CGPointMake(511, 489.36)];
        [cocktailBezierPath addLineToPoint: CGPointMake(379.66, 489.36)];
        [cocktailBezierPath addLineToPoint: CGPointMake(414.24, 453.28)];
        [cocktailBezierPath addCurveToPoint: CGPointMake(448.05, 443.7) controlPoint1: CGPointMake(425.25, 456.46) controlPoint2: CGPointMake(438.46, 453.22)];
        [cocktailBezierPath addCurveToPoint: CGPointMake(457.31, 408.27) controlPoint1: CGPointMake(458.02, 433.66) controlPoint2: CGPointMake(461.26, 419.67)];
        [cocktailBezierPath addLineToPoint: CGPointMake(491.76, 372.25)];
        [cocktailBezierPath addLineToPoint: CGPointMake(476.74, 358)];
        [cocktailBezierPath addLineToPoint: CGPointMake(443.38, 392.85)];
        [cocktailBezierPath addCurveToPoint: CGPointMake(405.11, 400.69) controlPoint1: CGPointMake(431.6, 387.08) controlPoint2: CGPointMake(416.05, 389.74)];
        [cocktailBezierPath addCurveToPoint: CGPointMake(397.85, 440.39) controlPoint1: CGPointMake(393.77, 412.09) controlPoint2: CGPointMake(391.25, 428.48)];
        [cocktailBezierPath addLineToPoint: CGPointMake(351.03, 489.36)];
        [cocktailBezierPath addLineToPoint: CGPointMake(0, 489.36)];
        [cocktailBezierPath addLineToPoint: CGPointMake(240.02, 739.85)];
        [cocktailBezierPath addLineToPoint: CGPointMake(240.02, 950.83)];
        [cocktailBezierPath addLineToPoint: CGPointMake(124.09, 1001.16)];
        [cocktailBezierPath addCurveToPoint: CGPointMake(387.04, 1001.16) controlPoint1: CGPointMake(124.09, 1001.16) controlPoint2: CGPointMake(254.85, 1047.73)];
        [cocktailBezierPath addLineToPoint: CGPointMake(271.11, 950.83)];
        [cocktailBezierPath addLineToPoint: CGPointMake(271.11, 739.85)];
        [cocktailBezierPath addLineToPoint: CGPointMake(271.04, 739.85)];
        [cocktailBezierPath closePath];
        [cocktailBezierPath moveToPoint: CGPointMake(290.21, 552.78)];
        [cocktailBezierPath addLineToPoint: CGPointMake(238.86, 606.48)];
        [cocktailBezierPath addLineToPoint: CGPointMake(253.75, 620.79)];
        [cocktailBezierPath addLineToPoint: CGPointMake(318.91, 552.84)];
        [cocktailBezierPath addLineToPoint: CGPointMake(410.68, 552.84)];
        [cocktailBezierPath addLineToPoint: CGPointMake(255.56, 714.65)];
        [cocktailBezierPath addLineToPoint: CGPointMake(100.45, 552.78)];
        [cocktailBezierPath addLineToPoint: CGPointMake(290.21, 552.78)];
        [cocktailBezierPath closePath];
        cocktailBezierPath.miterLimit = 4;

        [strokeColor setFill];
        [cocktailBezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawOutlineIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Icon Rectangle Drawing
        UIBezierPath* iconRectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(5, 5, 1014, 1014)];
        [SHStyleKit.myScreenColor setFill];
        [iconRectanglePath fill];
        [strokeColor setStroke];
        iconRectanglePath.lineWidth = 10;
        [iconRectanglePath stroke];



        CGContextRestoreGState(context);
    }
}

+ (void)drawCheckMarkIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName fillColorName: (NSString*)fillColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;
    UIColor* fillColor = [fillColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [fillColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [fillColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [fillColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [fillColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [fillColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [fillColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 0.4, 0);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(24.6, 694.36)];
        [bezierPath addLineToPoint: CGPointMake(356.54, 968.3)];
        [bezierPath addLineToPoint: CGPointMake(978.6, 285.7)];
        [bezierPath addLineToPoint: CGPointMake(760.07, 94)];
        [bezierPath addLineToPoint: CGPointMake(355.1, 732.05)];
        [bezierPath addLineToPoint: CGPointMake(167.94, 531.15)];
        [bezierPath addLineToPoint: CGPointMake(24.6, 694.36)];
        [bezierPath closePath];
        [fillColor setFill];
        [bezierPath fill];
        [strokeColor setStroke];
        bezierPath.lineWidth = 12;
        [bezierPath stroke];



        CGContextRestoreGState(context);
    }
}

+ (void)drawThumbsUpIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName fillColorName: (NSString*)fillColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;
    UIColor* fillColor = [fillColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [fillColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [fillColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [fillColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [fillColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [fillColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [fillColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(329.6, 360.1)];
        [bezierPath addCurveToPoint: CGPointMake(293.2, 284.1) controlPoint1: CGPointMake(324.2, 331.6) controlPoint2: CGPointMake(312.2, 306.3)];
        [bezierPath addCurveToPoint: CGPointMake(264.3, 243.6) controlPoint1: CGPointMake(282.4, 271.5) controlPoint2: CGPointMake(270.8, 258.5)];
        [bezierPath addCurveToPoint: CGPointMake(258.7, 105.9) controlPoint1: CGPointMake(244.7, 198.9) controlPoint2: CGPointMake(242, 152.4)];
        [bezierPath addCurveToPoint: CGPointMake(297.5, 54.6) controlPoint1: CGPointMake(266.2, 85) controlPoint2: CGPointMake(279.2, 67.6)];
        [bezierPath addCurveToPoint: CGPointMake(323.4, 48.2) controlPoint1: CGPointMake(305.3, 49) controlPoint2: CGPointMake(314, 47.1)];
        [bezierPath addCurveToPoint: CGPointMake(354.9, 60.1) controlPoint1: CGPointMake(334.9, 49.6) controlPoint2: CGPointMake(345.3, 53.8)];
        [bezierPath addCurveToPoint: CGPointMake(374.6, 93) controlPoint1: CGPointMake(366.7, 67.9) controlPoint2: CGPointMake(374.1, 78.5)];
        [bezierPath addCurveToPoint: CGPointMake(374.6, 114.3) controlPoint1: CGPointMake(374.8, 100.1) controlPoint2: CGPointMake(375.1, 107.2)];
        [bezierPath addCurveToPoint: CGPointMake(402, 209) controlPoint1: CGPointMake(372.5, 149.1) controlPoint2: CGPointMake(381.1, 180.9)];
        [bezierPath addCurveToPoint: CGPointMake(432.7, 245.8) controlPoint1: CGPointMake(411.5, 221.8) controlPoint2: CGPointMake(422.4, 233.6)];
        [bezierPath addCurveToPoint: CGPointMake(467.6, 271.9) controlPoint1: CGPointMake(442.4, 257.1) controlPoint2: CGPointMake(454.5, 265.1)];
        [bezierPath addCurveToPoint: CGPointMake(531.4, 319.6) controlPoint1: CGPointMake(491.5, 284.2) controlPoint2: CGPointMake(512.4, 300.7)];
        [bezierPath addCurveToPoint: CGPointMake(599.2, 406) controlPoint1: CGPointMake(557.6, 345.6) controlPoint2: CGPointMake(579.2, 375.2)];
        [bezierPath addCurveToPoint: CGPointMake(651.3, 488.2) controlPoint1: CGPointMake(616.9, 433.2) controlPoint2: CGPointMake(633.8, 460.9)];
        [bezierPath addCurveToPoint: CGPointMake(658.1, 493.1) controlPoint1: CGPointMake(652.7, 490.4) controlPoint2: CGPointMake(655.7, 493)];
        [bezierPath addCurveToPoint: CGPointMake(694.8, 493.2) controlPoint1: CGPointMake(670.3, 493.6) controlPoint2: CGPointMake(682.6, 493.5)];
        [bezierPath addCurveToPoint: CGPointMake(699.8, 489.6) controlPoint1: CGPointMake(696.5, 493.2) controlPoint2: CGPointMake(699.1, 491.3)];
        [bezierPath addCurveToPoint: CGPointMake(748.5, 457.4) controlPoint1: CGPointMake(709.1, 467.5) controlPoint2: CGPointMake(724.3, 457.4)];
        [bezierPath addCurveToPoint: CGPointMake(882.6, 457.4) controlPoint1: CGPointMake(793.2, 457.4) controlPoint2: CGPointMake(837.9, 457.4)];
        [bezierPath addCurveToPoint: CGPointMake(956, 457.5) controlPoint1: CGPointMake(907.1, 457.4) controlPoint2: CGPointMake(931.5, 457.2)];
        [bezierPath addCurveToPoint: CGPointMake(998.9, 498.7) controlPoint1: CGPointMake(978.8, 457.8) controlPoint2: CGPointMake(998.3, 476.8)];
        [bezierPath addCurveToPoint: CGPointMake(999, 522) controlPoint1: CGPointMake(999.1, 506.5) controlPoint2: CGPointMake(999, 514.2)];
        [bezierPath addCurveToPoint: CGPointMake(998.6, 773.4) controlPoint1: CGPointMake(998.9, 605.8) controlPoint2: CGPointMake(998.7, 689.6)];
        [bezierPath addCurveToPoint: CGPointMake(998.8, 935.5) controlPoint1: CGPointMake(998.6, 827.4) controlPoint2: CGPointMake(999, 881.4)];
        [bezierPath addCurveToPoint: CGPointMake(955.3, 978.8) controlPoint1: CGPointMake(998.7, 959.5) controlPoint2: CGPointMake(979.4, 978.7)];
        [bezierPath addCurveToPoint: CGPointMake(699.8, 978.8) controlPoint1: CGPointMake(870.1, 979) controlPoint2: CGPointMake(785, 979)];
        [bezierPath addCurveToPoint: CGPointMake(659.3, 943.4) controlPoint1: CGPointMake(678.9, 978.8) controlPoint2: CGPointMake(662.4, 964.1)];
        [bezierPath addCurveToPoint: CGPointMake(659.2, 926.2) controlPoint1: CGPointMake(658.5, 938) controlPoint2: CGPointMake(659.2, 932.4)];
        [bezierPath addCurveToPoint: CGPointMake(608.2, 934.8) controlPoint1: CGPointMake(641.6, 926.4) controlPoint2: CGPointMake(624.2, 923.9)];
        [bezierPath addCurveToPoint: CGPointMake(561.4, 963) controlPoint1: CGPointMake(593.2, 945.1) controlPoint2: CGPointMake(577.2, 953.9)];
        [bezierPath addCurveToPoint: CGPointMake(519.4, 973.8) controlPoint1: CGPointMake(548.5, 970.5) controlPoint2: CGPointMake(534.6, 973.8)];
        [bezierPath addCurveToPoint: CGPointMake(231.2, 973.3) controlPoint1: CGPointMake(423.4, 973.4) controlPoint2: CGPointMake(327.3, 973.7)];
        [bezierPath addCurveToPoint: CGPointMake(182.9, 969.4) controlPoint1: CGPointMake(215.1, 973.2) controlPoint2: CGPointMake(198.7, 972.2)];
        [bezierPath addCurveToPoint: CGPointMake(101.7, 937.8) controlPoint1: CGPointMake(153.8, 964.4) controlPoint2: CGPointMake(126, 955.4)];
        [bezierPath addCurveToPoint: CGPointMake(70, 871.8) controlPoint1: CGPointMake(79.2, 921.5) controlPoint2: CGPointMake(68.7, 899.4)];
        [bezierPath addCurveToPoint: CGPointMake(86.6, 838.4) controlPoint1: CGPointMake(70.6, 858.4) controlPoint2: CGPointMake(74.1, 846.3)];
        [bezierPath addCurveToPoint: CGPointMake(81.5, 834.8) controlPoint1: CGPointMake(84.7, 837.1) controlPoint2: CGPointMake(83.1, 836)];
        [bezierPath addCurveToPoint: CGPointMake(42.1, 749.5) controlPoint1: CGPointMake(52.5, 813.7) controlPoint2: CGPointMake(39.5, 785)];
        [bezierPath addCurveToPoint: CGPointMake(66.9, 705.3) controlPoint1: CGPointMake(43.4, 731.4) controlPoint2: CGPointMake(51.7, 716.4)];
        [bezierPath addCurveToPoint: CGPointMake(26, 632.8) controlPoint1: CGPointMake(38.5, 689) controlPoint2: CGPointMake(27.9, 663.2)];
        [bezierPath addCurveToPoint: CGPointMake(69, 562.2) controlPoint1: CGPointMake(24, 599.7) controlPoint2: CGPointMake(41.7, 578.2)];
        [bezierPath addCurveToPoint: CGPointMake(39.4, 531.5) controlPoint1: CGPointMake(56, 554.5) controlPoint2: CGPointMake(46.5, 544.1)];
        [bezierPath addCurveToPoint: CGPointMake(24.4, 476.1) controlPoint1: CGPointMake(29.8, 514.3) controlPoint2: CGPointMake(26, 495.6)];
        [bezierPath addCurveToPoint: CGPointMake(67.2, 406) controlPoint1: CGPointMake(21.3, 437.6) controlPoint2: CGPointMake(39.5, 419.4)];
        [bezierPath addCurveToPoint: CGPointMake(127.3, 389.4) controlPoint1: CGPointMake(86.2, 396.8) controlPoint2: CGPointMake(106.6, 392.5)];
        [bezierPath addCurveToPoint: CGPointMake(232.5, 385) controlPoint1: CGPointMake(162.2, 384.2) controlPoint2: CGPointMake(197.4, 385.1)];
        [bezierPath addCurveToPoint: CGPointMake(332.7, 385) controlPoint1: CGPointMake(265.4, 384.9) controlPoint2: CGPointMake(298.3, 385)];
        [bezierPath addCurveToPoint: CGPointMake(329.6, 360.1) controlPoint1: CGPointMake(331.8, 376.2) controlPoint2: CGPointMake(331.2, 368)];
        [bezierPath closePath];
        bezierPath.miterLimit = 4;

        [fillColor setFill];
        [bezierPath fill];
        [strokeColor setStroke];
        bezierPath.lineWidth = 30;
        [bezierPath stroke];



        CGContextRestoreGState(context);
    }
}

+ (void)drawShareIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY color1Name: (NSString*)color1Name color2Name: (NSString*)color2Name color3Name: (NSString*)color3Name;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* myColor1 = [color1Name isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [color1Name isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [color1Name isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [color1Name isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [color1Name isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;
    UIColor* myColor2 = [color2Name isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [color2Name isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [color2Name isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [color2Name isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [color2Name isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;
    UIColor* myColor3 = [color3Name isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [color3Name isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [color3Name isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [color3Name isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [color3Name isEqualToString: @"default"] ? SHStyleKit.myTintColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Circle Drawing
        UIBezierPath* circlePath = UIBezierPath.bezierPath;
        [circlePath moveToPoint: CGPointMake(473.8, 43)];
        [circlePath addCurveToPoint: CGPointMake(6.7, 510) controlPoint1: CGPointMake(216.2, 43) controlPoint2: CGPointMake(6.7, 252.5)];
        [circlePath addCurveToPoint: CGPointMake(129.6, 825.4) controlPoint1: CGPointMake(6.7, 631.5) controlPoint2: CGPointMake(53.4, 742.3)];
        [circlePath addLineToPoint: CGPointMake(126.8, 961.7)];
        [circlePath addLineToPoint: CGPointMake(262.4, 926.3)];
        [circlePath addCurveToPoint: CGPointMake(473.7, 977.1) controlPoint1: CGPointMake(325.9, 958.7) controlPoint2: CGPointMake(397.7, 977.1)];
        [circlePath addCurveToPoint: CGPointMake(940.8, 510) controlPoint1: CGPointMake(731.2, 977.1) controlPoint2: CGPointMake(940.8, 767.6)];
        [circlePath addCurveToPoint: CGPointMake(473.8, 43) controlPoint1: CGPointMake(940.8, 252.5) controlPoint2: CGPointMake(731.3, 43)];
        [circlePath closePath];
        [circlePath moveToPoint: CGPointMake(473.8, 879.3)];
        [circlePath addCurveToPoint: CGPointMake(104.6, 510.1) controlPoint1: CGPointMake(270.2, 879.3) controlPoint2: CGPointMake(104.6, 713.7)];
        [circlePath addCurveToPoint: CGPointMake(473.8, 140.9) controlPoint1: CGPointMake(104.6, 306.5) controlPoint2: CGPointMake(270.2, 140.9)];
        [circlePath addCurveToPoint: CGPointMake(843, 510) controlPoint1: CGPointMake(677.4, 140.9) controlPoint2: CGPointMake(843, 306.5)];
        [circlePath addCurveToPoint: CGPointMake(473.8, 879.3) controlPoint1: CGPointMake(843, 713.6) controlPoint2: CGPointMake(677.3, 879.3)];
        [circlePath closePath];
        circlePath.miterLimit = 4;

        [myColor3 setFill];
        [circlePath fill];


        //// Arrow Drawing
        UIBezierPath* arrowPath = UIBezierPath.bezierPath;
        [arrowPath moveToPoint: CGPointMake(736.9, 147.8)];
        [arrowPath addLineToPoint: CGPointMake(972.4, 323.9)];
        [arrowPath addCurveToPoint: CGPointMake(1013.4, 404.3) controlPoint1: CGPointMake(998, 343) controlPoint2: CGPointMake(1013, 372.3)];
        [arrowPath addCurveToPoint: CGPointMake(974.8, 485.9) controlPoint1: CGPointMake(1013.9, 436.3) controlPoint2: CGPointMake(999.8, 466)];
        [arrowPath addLineToPoint: CGPointMake(738.7, 673.9)];
        [arrowPath addCurveToPoint: CGPointMake(712.4, 685.9) controlPoint1: CGPointMake(731.5, 679.6) controlPoint2: CGPointMake(722.6, 683.7)];
        [arrowPath addCurveToPoint: CGPointMake(696.7, 687.6) controlPoint1: CGPointMake(707.3, 687) controlPoint2: CGPointMake(702, 687.6)];
        [arrowPath addCurveToPoint: CGPointMake(621.9, 631.7) controlPoint1: CGPointMake(663.2, 687.6) controlPoint2: CGPointMake(632.5, 664.6)];
        [arrowPath addLineToPoint: CGPointMake(603.6, 574.8)];
        [arrowPath addCurveToPoint: CGPointMake(601.8, 573) controlPoint1: CGPointMake(603.3, 573.7) controlPoint2: CGPointMake(602.4, 573.1)];
        [arrowPath addCurveToPoint: CGPointMake(596.9, 572.9) controlPoint1: CGPointMake(600.2, 572.9) controlPoint2: CGPointMake(598.6, 572.9)];
        [arrowPath addCurveToPoint: CGPointMake(305.6, 842.1) controlPoint1: CGPointMake(509.3, 572.9) controlPoint2: CGPointMake(376.4, 673.6)];
        [arrowPath addCurveToPoint: CGPointMake(247.9, 879.3) controlPoint1: CGPointMake(295.9, 865.4) controlPoint2: CGPointMake(274.3, 879.3)];
        [arrowPath addCurveToPoint: CGPointMake(196.9, 858.5) controlPoint1: CGPointMake(227.8, 879.3) controlPoint2: CGPointMake(207.8, 871.1)];
        [arrowPath addCurveToPoint: CGPointMake(187.7, 833.5) controlPoint1: CGPointMake(190.5, 851.1) controlPoint2: CGPointMake(187.3, 842.3)];
        [arrowPath addCurveToPoint: CGPointMake(575.2, 254.4) controlPoint1: CGPointMake(161.9, 504.6) controlPoint2: CGPointMake(281.4, 326)];
        [arrowPath addCurveToPoint: CGPointMake(577.2, 252.5) controlPoint1: CGPointMake(576.2, 254.2) controlPoint2: CGPointMake(577, 253.4)];
        [arrowPath addLineToPoint: CGPointMake(597.5, 161.6)];
        [arrowPath addLineToPoint: CGPointMake(600.1, 157.9)];
        [arrowPath addCurveToPoint: CGPointMake(667.3, 119) controlPoint1: CGPointMake(623.2, 125.7) controlPoint2: CGPointMake(649.4, 119)];
        [arrowPath addCurveToPoint: CGPointMake(736.9, 147.8) controlPoint1: CGPointMake(694.7, 119) controlPoint2: CGPointMake(717.9, 133.5)];
        [arrowPath closePath];
        [myColor1 setFill];
        [arrowPath fill];
        [myColor2 setStroke];
        arrowPath.lineWidth = 25;
        [arrowPath stroke];



        CGContextRestoreGState(context);
    }
}

+ (void)drawReviewsIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(289.61, 199.39)];
        [bezierPath addCurveToPoint: CGPointMake(322.21, 261.9) controlPoint1: CGPointMake(307.3, 217.07) controlPoint2: CGPointMake(318.17, 239)];
        [bezierPath addLineToPoint: CGPointMake(1022, 261.9)];
        [bezierPath addLineToPoint: CGPointMake(1022, 310.3)];
        [bezierPath addLineToPoint: CGPointMake(320.65, 310.3)];
        [bezierPath addCurveToPoint: CGPointMake(289.61, 365.41) controlPoint1: CGPointMake(315.73, 330.5) controlPoint2: CGPointMake(305.39, 349.64)];
        [bezierPath addCurveToPoint: CGPointMake(123.59, 365.41) controlPoint1: CGPointMake(243.77, 411.26) controlPoint2: CGPointMake(169.43, 411.26)];
        [bezierPath addCurveToPoint: CGPointMake(92.55, 310.3) controlPoint1: CGPointMake(107.81, 349.64) controlPoint2: CGPointMake(97.47, 330.5)];
        [bezierPath addLineToPoint: CGPointMake(4.4, 310.3)];
        [bezierPath addLineToPoint: CGPointMake(4.4, 261.9)];
        [bezierPath addLineToPoint: CGPointMake(90.99, 261.9)];
        [bezierPath addCurveToPoint: CGPointMake(123.59, 199.39) controlPoint1: CGPointMake(95.03, 239) controlPoint2: CGPointMake(105.9, 217.07)];
        [bezierPath addCurveToPoint: CGPointMake(289.61, 199.39) controlPoint1: CGPointMake(169.43, 153.54) controlPoint2: CGPointMake(243.77, 153.54)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(987.61, 455.89)];
        [bezierPath addCurveToPoint: CGPointMake(1021.81, 532.2) controlPoint1: CGPointMake(1008.83, 477.1) controlPoint2: CGPointMake(1020.23, 504.43)];
        [bezierPath addLineToPoint: CGPointMake(1022, 532.2)];
        [bezierPath addLineToPoint: CGPointMake(1022, 580.6)];
        [bezierPath addLineToPoint: CGPointMake(1014.38, 580.6)];
        [bezierPath addCurveToPoint: CGPointMake(987.61, 621.91) controlPoint1: CGPointMake(1008.66, 595.66) controlPoint2: CGPointMake(999.74, 609.79)];
        [bezierPath addCurveToPoint: CGPointMake(821.59, 621.91) controlPoint1: CGPointMake(941.77, 667.76) controlPoint2: CGPointMake(867.43, 667.76)];
        [bezierPath addCurveToPoint: CGPointMake(794.82, 580.6) controlPoint1: CGPointMake(809.46, 609.79) controlPoint2: CGPointMake(800.54, 595.66)];
        [bezierPath addLineToPoint: CGPointMake(4.4, 580.6)];
        [bezierPath addLineToPoint: CGPointMake(4.4, 532.2)];
        [bezierPath addLineToPoint: CGPointMake(787.39, 532.2)];
        [bezierPath addCurveToPoint: CGPointMake(821.59, 455.89) controlPoint1: CGPointMake(788.97, 504.43) controlPoint2: CGPointMake(800.37, 477.1)];
        [bezierPath addCurveToPoint: CGPointMake(987.61, 455.89) controlPoint1: CGPointMake(867.43, 410.04) controlPoint2: CGPointMake(941.77, 410.04)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(596.21, 748.49)];
        [bezierPath addCurveToPoint: CGPointMake(628.09, 807.3) controlPoint1: CGPointMake(612.95, 765.22) controlPoint2: CGPointMake(623.57, 785.75)];
        [bezierPath addLineToPoint: CGPointMake(1022, 807.3)];
        [bezierPath addLineToPoint: CGPointMake(1022, 855.7)];
        [bezierPath addLineToPoint: CGPointMake(628.09, 855.7)];
        [bezierPath addCurveToPoint: CGPointMake(596.21, 914.51) controlPoint1: CGPointMake(623.57, 877.25) controlPoint2: CGPointMake(612.95, 897.78)];
        [bezierPath addCurveToPoint: CGPointMake(430.19, 914.51) controlPoint1: CGPointMake(550.37, 960.36) controlPoint2: CGPointMake(476.03, 960.36)];
        [bezierPath addCurveToPoint: CGPointMake(398.31, 855.7) controlPoint1: CGPointMake(413.45, 897.78) controlPoint2: CGPointMake(402.83, 877.25)];
        [bezierPath addLineToPoint: CGPointMake(4.4, 855.7)];
        [bezierPath addLineToPoint: CGPointMake(4.4, 807.3)];
        [bezierPath addLineToPoint: CGPointMake(398.31, 807.3)];
        [bezierPath addCurveToPoint: CGPointMake(430.19, 748.49) controlPoint1: CGPointMake(402.83, 785.75) controlPoint2: CGPointMake(413.45, 765.22)];
        [bezierPath addCurveToPoint: CGPointMake(596.21, 748.49) controlPoint1: CGPointMake(476.03, 702.64) controlPoint2: CGPointMake(550.37, 702.64)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawDrinkMenuIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(624, 0)];
        [bezierPath addLineToPoint: CGPointMake(624, 248.3)];
        [bezierPath addLineToPoint: CGPointMake(881.2, 248.3)];
        [bezierPath addLineToPoint: CGPointMake(624, 0)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(816.9, 369.3)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 369.3)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 399)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 399)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 369.3)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(816.9, 487.5)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 487.5)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 517.2)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 517.2)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 487.5)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(816.9, 605.7)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 605.7)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 635.4)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 635.4)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 605.7)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(816.9, 723.9)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 723.9)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 753.6)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 753.6)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 723.9)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(816.9, 842.2)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 842.2)];
        [bezierPath addLineToPoint: CGPointMake(210.2, 871.9)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 871.9)];
        [bezierPath addLineToPoint: CGPointMake(816.9, 842.2)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(605.3, 0)];
        [bezierPath addCurveToPoint: CGPointMake(605.3, 269) controlPoint1: CGPointMake(605.3, 0) controlPoint2: CGPointMake(605.3, 269)];
        [bezierPath addLineToPoint: CGPointMake(881.2, 269)];
        [bezierPath addLineToPoint: CGPointMake(881.2, 1024)];
        [bezierPath addLineToPoint: CGPointMake(142.8, 1024)];
        [bezierPath addLineToPoint: CGPointMake(142.8, 0)];
        [bezierPath addLineToPoint: CGPointMake(605.3, 0)];
        [bezierPath addLineToPoint: CGPointMake(605.3, 0)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawWineDrinklistIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(678.01, 52.48)];
        [bezierPath addLineToPoint: CGPointMake(235.51, 52.48)];
        [bezierPath addCurveToPoint: CGPointMake(251.69, 197.14) controlPoint1: CGPointMake(238.6, 105.7) controlPoint2: CGPointMake(243.99, 153.93)];
        [bezierPath addLineToPoint: CGPointMake(670.83, 197.14)];
        [bezierPath addCurveToPoint: CGPointMake(678.01, 52.48) controlPoint1: CGPointMake(675.7, 153.88) controlPoint2: CGPointMake(678.1, 105.63)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(832.71, 324.71)];
        [bezierPath addLineToPoint: CGPointMake(695.4, 324.71)];
        [bezierPath addCurveToPoint: CGPointMake(664.6, 401.94) controlPoint1: CGPointMake(686.92, 353.67) controlPoint2: CGPointMake(676.65, 379.38)];
        [bezierPath addCurveToPoint: CGPointMake(828.9, 401.94) controlPoint1: CGPointMake(711.26, 401.94) controlPoint2: CGPointMake(828.9, 401.94)];
        [bezierPath addCurveToPoint: CGPointMake(832.71, 324.71) controlPoint1: CGPointMake(831.49, 378.84) controlPoint2: CGPointMake(832.77, 353.09)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(667.79, 221.21)];
        [bezierPath addLineToPoint: CGPointMake(256.33, 221.21)];
        [bezierPath addCurveToPoint: CGPointMake(468.61, 473.87) controlPoint1: CGPointMake(290.63, 386.43) controlPoint2: CGPointMake(361.71, 471.25)];
        [bezierPath addCurveToPoint: CGPointMake(585.51, 429.71) controlPoint1: CGPointMake(516.31, 474.86) controlPoint2: CGPointMake(554.71, 460.28)];
        [bezierPath addCurveToPoint: CGPointMake(667.79, 221.21) controlPoint1: CGPointMake(626.56, 388.84) controlPoint2: CGPointMake(654.06, 319)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(657.31, 414.82)];
        [bezierPath addCurveToPoint: CGPointMake(620.99, 462.29) controlPoint1: CGPointMake(646.5, 432.89) controlPoint2: CGPointMake(634.39, 448.7)];
        [bezierPath addCurveToPoint: CGPointMake(721.01, 549.59) controlPoint1: CGPointMake(641.89, 519.2) controlPoint2: CGPointMake(675.34, 548.47)];
        [bezierPath addCurveToPoint: CGPointMake(783.41, 526.01) controlPoint1: CGPointMake(746.51, 550.09) controlPoint2: CGPointMake(767.01, 542.3)];
        [bezierPath addCurveToPoint: CGPointMake(827.27, 414.82) controlPoint1: CGPointMake(805.29, 504.23) controlPoint2: CGPointMake(819.96, 466.98)];
        [bezierPath addCurveToPoint: CGPointMake(657.31, 414.82) controlPoint1: CGPointMake(827.27, 414.82) controlPoint2: CGPointMake(713.05, 414.82)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(719.61, 786.76)];
        [bezierPath addCurveToPoint: CGPointMake(686.11, 817.33) controlPoint1: CGPointMake(710.71, 798.45) controlPoint2: CGPointMake(699.61, 808.64)];
        [bezierPath addLineToPoint: CGPointMake(750.91, 817.33)];
        [bezierPath addCurveToPoint: CGPointMake(719.61, 786.76) controlPoint1: CGPointMake(737.91, 808.64) controlPoint2: CGPointMake(727.51, 798.45)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(725.51, 4.32)];
        [bezierPath addCurveToPoint: CGPointMake(725.91, 28) controlPoint1: CGPointMake(725.51, 4.32) controlPoint2: CGPointMake(725.91, 28)];
        [bezierPath addCurveToPoint: CGPointMake(702.26, 299.04) controlPoint1: CGPointMake(727.56, 136.88) controlPoint2: CGPointMake(719.75, 226.9)];
        [bezierPath addLineToPoint: CGPointMake(858.11, 299.04)];
        [bezierPath addLineToPoint: CGPointMake(858.31, 311.72)];
        [bezierPath addCurveToPoint: CGPointMake(801.51, 544.3) controlPoint1: CGPointMake(860.11, 428.41) controlPoint2: CGPointMake(841.51, 504.44)];
        [bezierPath addCurveToPoint: CGPointMake(733.61, 574.97) controlPoint1: CGPointMake(783.11, 562.58) controlPoint2: CGPointMake(760.31, 572.87)];
        [bezierPath addLineToPoint: CGPointMake(733.61, 758.39)];
        [bezierPath addCurveToPoint: CGPointMake(795.31, 810.94) controlPoint1: CGPointMake(742.81, 781.86) controlPoint2: CGPointMake(763.01, 799.05)];
        [bezierPath addCurveToPoint: CGPointMake(805.91, 829.42) controlPoint1: CGPointMake(802.91, 813.73) controlPoint2: CGPointMake(807.31, 821.53)];
        [bezierPath addCurveToPoint: CGPointMake(789.51, 843) controlPoint1: CGPointMake(804.41, 837.31) controlPoint2: CGPointMake(797.61, 843)];
        [bezierPath addLineToPoint: CGPointMake(643.61, 843)];
        [bezierPath addCurveToPoint: CGPointMake(627.91, 829.82) controlPoint1: CGPointMake(635.81, 843) controlPoint2: CGPointMake(629.21, 837.51)];
        [bezierPath addCurveToPoint: CGPointMake(638.21, 812.03) controlPoint1: CGPointMake(626.61, 822.23) controlPoint2: CGPointMake(630.91, 814.73)];
        [bezierPath addCurveToPoint: CGPointMake(707.81, 757.59) controlPoint1: CGPointMake(672.21, 799.75) controlPoint2: CGPointMake(695.01, 781.96)];
        [bezierPath addLineToPoint: CGPointMake(707.81, 574.37)];
        [bezierPath addCurveToPoint: CGPointMake(600.47, 480.52) controlPoint1: CGPointMake(659.46, 568.77) controlPoint2: CGPointMake(623.61, 537.33)];
        [bezierPath addCurveToPoint: CGPointMake(492.21, 521.32) controlPoint1: CGPointMake(569.7, 504.37) controlPoint2: CGPointMake(533.47, 518.03)];
        [bezierPath addLineToPoint: CGPointMake(492.21, 865.08)];
        [bezierPath addCurveToPoint: CGPointMake(607.81, 963.59) controlPoint1: CGPointMake(509.51, 909.04) controlPoint2: CGPointMake(547.41, 941.31)];
        [bezierPath addCurveToPoint: CGPointMake(627.61, 998.25) controlPoint1: CGPointMake(622.01, 968.88) controlPoint2: CGPointMake(630.31, 983.47)];
        [bezierPath addCurveToPoint: CGPointMake(597.01, 1023.83) controlPoint1: CGPointMake(624.91, 1013.14) controlPoint2: CGPointMake(612.11, 1023.83)];
        [bezierPath addLineToPoint: CGPointMake(323.61, 1023.83)];
        [bezierPath addCurveToPoint: CGPointMake(294.21, 999.15) controlPoint1: CGPointMake(309.11, 1023.83) controlPoint2: CGPointMake(296.71, 1013.44)];
        [bezierPath addCurveToPoint: CGPointMake(313.51, 965.88) controlPoint1: CGPointMake(291.71, 984.87) controlPoint2: CGPointMake(299.81, 970.88)];
        [bezierPath addCurveToPoint: CGPointMake(444.01, 863.78) controlPoint1: CGPointMake(377.21, 942.91) controlPoint2: CGPointMake(419.91, 909.44)];
        [bezierPath addLineToPoint: CGPointMake(444.01, 520.42)];
        [bezierPath addCurveToPoint: CGPointMake(186.01, 29.4) controlPoint1: CGPointMake(286.11, 502.14) controlPoint2: CGPointMake(199.31, 337.2)];
        [bezierPath addLineToPoint: CGPointMake(184.91, 4.32)];
        [bezierPath addLineToPoint: CGPointMake(725.51, 4.32)];
        [bezierPath addLineToPoint: CGPointMake(725.51, 4.32)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(466.01, 918.43)];
        [bezierPath addCurveToPoint: CGPointMake(403.21, 975.68) controlPoint1: CGPointMake(449.31, 940.41) controlPoint2: CGPointMake(428.51, 959.39)];
        [bezierPath addLineToPoint: CGPointMake(524.61, 975.68)];
        [bezierPath addCurveToPoint: CGPointMake(466.01, 918.43) controlPoint1: CGPointMake(500.31, 959.39) controlPoint2: CGPointMake(480.71, 940.31)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawBeerDrinklistIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(749.83, 695.31)];
        [bezierPath addCurveToPoint: CGPointMake(749.83, 707.89) controlPoint1: CGPointMake(753.31, 698.78) controlPoint2: CGPointMake(753.31, 704.42)];
        [bezierPath addCurveToPoint: CGPointMake(737.24, 707.89) controlPoint1: CGPointMake(746.36, 711.37) controlPoint2: CGPointMake(740.72, 711.37)];
        [bezierPath addCurveToPoint: CGPointMake(737.24, 695.31) controlPoint1: CGPointMake(733.77, 704.42) controlPoint2: CGPointMake(733.77, 698.78)];
        [bezierPath addCurveToPoint: CGPointMake(749.83, 695.31) controlPoint1: CGPointMake(740.72, 691.83) controlPoint2: CGPointMake(746.36, 691.83)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(774.55, 617.81)];
        [bezierPath addCurveToPoint: CGPointMake(774.55, 605.79) controlPoint1: CGPointMake(777.87, 614.49) controlPoint2: CGPointMake(777.87, 609.11)];
        [bezierPath addCurveToPoint: CGPointMake(762.53, 605.79) controlPoint1: CGPointMake(771.23, 602.47) controlPoint2: CGPointMake(765.85, 602.47)];
        [bezierPath addCurveToPoint: CGPointMake(762.53, 617.81) controlPoint1: CGPointMake(759.21, 609.11) controlPoint2: CGPointMake(759.21, 614.49)];
        [bezierPath addCurveToPoint: CGPointMake(774.55, 617.81) controlPoint1: CGPointMake(765.85, 621.13) controlPoint2: CGPointMake(771.23, 621.13)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(736.56, 531.78)];
        [bezierPath addCurveToPoint: CGPointMake(736.56, 541.82) controlPoint1: CGPointMake(739.33, 534.55) controlPoint2: CGPointMake(739.33, 539.05)];
        [bezierPath addCurveToPoint: CGPointMake(726.52, 541.82) controlPoint1: CGPointMake(733.79, 544.59) controlPoint2: CGPointMake(729.29, 544.59)];
        [bezierPath addCurveToPoint: CGPointMake(726.52, 531.78) controlPoint1: CGPointMake(723.74, 539.05) controlPoint2: CGPointMake(723.74, 534.55)];
        [bezierPath addCurveToPoint: CGPointMake(736.56, 531.78) controlPoint1: CGPointMake(729.29, 529.01) controlPoint2: CGPointMake(733.79, 529.01)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(769.32, 428.92)];
        [bezierPath addCurveToPoint: CGPointMake(769.32, 446.88) controlPoint1: CGPointMake(774.28, 433.88) controlPoint2: CGPointMake(774.28, 441.92)];
        [bezierPath addCurveToPoint: CGPointMake(751.36, 446.88) controlPoint1: CGPointMake(764.36, 451.84) controlPoint2: CGPointMake(756.32, 451.84)];
        [bezierPath addCurveToPoint: CGPointMake(751.36, 428.92) controlPoint1: CGPointMake(746.4, 441.92) controlPoint2: CGPointMake(746.4, 433.88)];
        [bezierPath addCurveToPoint: CGPointMake(769.32, 428.92) controlPoint1: CGPointMake(756.32, 423.96) controlPoint2: CGPointMake(764.36, 423.96)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(481.46, 718.68)];
        [bezierPath addCurveToPoint: CGPointMake(481.46, 739.32) controlPoint1: CGPointMake(487.16, 724.38) controlPoint2: CGPointMake(487.16, 733.62)];
        [bezierPath addCurveToPoint: CGPointMake(460.81, 739.32) controlPoint1: CGPointMake(475.76, 745.03) controlPoint2: CGPointMake(466.52, 745.03)];
        [bezierPath addCurveToPoint: CGPointMake(460.81, 718.68) controlPoint1: CGPointMake(455.11, 733.62) controlPoint2: CGPointMake(455.11, 724.38)];
        [bezierPath addCurveToPoint: CGPointMake(481.46, 718.68) controlPoint1: CGPointMake(466.52, 712.97) controlPoint2: CGPointMake(475.76, 712.97)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(459.61, 449.93)];
        [bezierPath addCurveToPoint: CGPointMake(459.61, 466.47) controlPoint1: CGPointMake(464.18, 454.5) controlPoint2: CGPointMake(464.18, 461.9)];
        [bezierPath addCurveToPoint: CGPointMake(443.06, 466.47) controlPoint1: CGPointMake(455.04, 471.04) controlPoint2: CGPointMake(447.63, 471.04)];
        [bezierPath addCurveToPoint: CGPointMake(443.06, 449.93) controlPoint1: CGPointMake(438.5, 461.9) controlPoint2: CGPointMake(438.5, 454.5)];
        [bezierPath addCurveToPoint: CGPointMake(459.61, 449.93) controlPoint1: CGPointMake(447.63, 445.36) controlPoint2: CGPointMake(455.04, 445.36)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(513.52, 280.92)];
        [bezierPath addCurveToPoint: CGPointMake(513.52, 310.48) controlPoint1: CGPointMake(521.68, 289.08) controlPoint2: CGPointMake(521.68, 302.32)];
        [bezierPath addCurveToPoint: CGPointMake(483.96, 310.48) controlPoint1: CGPointMake(505.35, 318.64) controlPoint2: CGPointMake(492.12, 318.64)];
        [bezierPath addCurveToPoint: CGPointMake(483.96, 280.92) controlPoint1: CGPointMake(475.8, 302.32) controlPoint2: CGPointMake(475.8, 289.08)];
        [bezierPath addCurveToPoint: CGPointMake(513.52, 280.92) controlPoint1: CGPointMake(492.12, 272.76) controlPoint2: CGPointMake(505.35, 272.76)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(522.04, 591.4)];
        [bezierPath addCurveToPoint: CGPointMake(522.04, 571.6) controlPoint1: CGPointMake(527.5, 585.93) controlPoint2: CGPointMake(527.5, 577.07)];
        [bezierPath addCurveToPoint: CGPointMake(502.24, 571.6) controlPoint1: CGPointMake(516.57, 566.13) controlPoint2: CGPointMake(507.71, 566.13)];
        [bezierPath addCurveToPoint: CGPointMake(502.24, 591.4) controlPoint1: CGPointMake(496.77, 577.07) controlPoint2: CGPointMake(496.77, 585.93)];
        [bezierPath addCurveToPoint: CGPointMake(522.04, 591.4) controlPoint1: CGPointMake(507.71, 596.87) controlPoint2: CGPointMake(516.57, 596.87)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(839.34, 283.6)];
        [bezierPath addCurveToPoint: CGPointMake(686.85, 290.08) controlPoint1: CGPointMake(839.34, 283.6) controlPoint2: CGPointMake(695.54, 289.71)];
        [bezierPath addCurveToPoint: CGPointMake(674, 345.74) controlPoint1: CGPointMake(683.47, 309.5) controlPoint2: CGPointMake(679.07, 327.92)];
        [bezierPath addCurveToPoint: CGPointMake(851.06, 344.87) controlPoint1: CGPointMake(722.88, 345.5) controlPoint2: CGPointMake(814.87, 345.05)];
        [bezierPath addCurveToPoint: CGPointMake(839.34, 283.6) controlPoint1: CGPointMake(848.89, 326.39) controlPoint2: CGPointMake(845.11, 306.14)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(853.12, 370.77)];
        [bezierPath addCurveToPoint: CGPointMake(666.05, 371.68) controlPoint1: CGPointMake(816.32, 370.95) controlPoint2: CGPointMake(712.85, 371.45)];
        [bezierPath addCurveToPoint: CGPointMake(642.24, 438.1) controlPoint1: CGPointMake(658.71, 394.18) controlPoint2: CGPointMake(650.52, 416.02)];
        [bezierPath addCurveToPoint: CGPointMake(591.49, 609.03) controlPoint1: CGPointMake(623.39, 488.3) controlPoint2: CGPointMake(603.49, 541.34)];
        [bezierPath addCurveToPoint: CGPointMake(624.54, 855.4) controlPoint1: CGPointMake(609.44, 667.29) controlPoint2: CGPointMake(644.88, 744.11)];
        [bezierPath addLineToPoint: CGPointMake(799.24, 855.4)];
        [bezierPath addCurveToPoint: CGPointMake(823.44, 515.3) controlPoint1: CGPointMake(764.64, 672) controlPoint2: CGPointMake(795.84, 588.9)];
        [bezierPath addCurveToPoint: CGPointMake(853.12, 370.77) controlPoint1: CGPointMake(840.28, 470.53) controlPoint2: CGPointMake(855.5, 429.9)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(661.14, 0)];
        [bezierPath addCurveToPoint: CGPointMake(665.44, 15.7) controlPoint1: CGPointMake(661.14, 0) controlPoint2: CGPointMake(665.44, 15.7)];
        [bezierPath addCurveToPoint: CGPointMake(691.36, 257.7) controlPoint1: CGPointMake(693.04, 116.76) controlPoint2: CGPointMake(698.13, 193.23)];
        [bezierPath addLineToPoint: CGPointMake(859.14, 257.7)];
        [bezierPath addLineToPoint: CGPointMake(861.74, 267.2)];
        [bezierPath addCurveToPoint: CGPointMake(847.64, 524.4) controlPoint1: CGPointMake(896.44, 394.3) controlPoint2: CGPointMake(872.74, 457.4)];
        [bezierPath addCurveToPoint: CGPointMake(827.64, 865.7) controlPoint1: CGPointMake(820.54, 596.8) controlPoint2: CGPointMake(789.74, 678.8)];
        [bezierPath addLineToPoint: CGPointMake(830.74, 881.3)];
        [bezierPath addLineToPoint: CGPointMake(593.04, 881.3)];
        [bezierPath addLineToPoint: CGPointMake(596.14, 865.8)];
        [bezierPath addCurveToPoint: CGPointMake(587.24, 636.07) controlPoint1: CGPointMake(616.98, 760.9) controlPoint2: CGPointMake(602.08, 691.33)];
        [bezierPath addCurveToPoint: CGPointMake(609.34, 998.7) controlPoint1: CGPointMake(575.1, 724.74) controlPoint2: CGPointMake(576.82, 838.17)];
        [bezierPath addLineToPoint: CGPointMake(614.44, 1024.1)];
        [bezierPath addLineToPoint: CGPointMake(224.04, 1024.1)];
        [bezierPath addLineToPoint: CGPointMake(229.14, 998.7)];
        [bezierPath addCurveToPoint: CGPointMake(183.74, 451.6) controlPoint1: CGPointMake(287.64, 704.4) controlPoint2: CGPointMake(232.44, 570.1)];
        [bezierPath addCurveToPoint: CGPointMake(168.04, 14.3) controlPoint1: CGPointMake(136.94, 337.7) controlPoint2: CGPointMake(92.84, 230.2)];
        [bezierPath addLineToPoint: CGPointMake(173.04, 0)];
        [bezierPath addLineToPoint: CGPointMake(661.14, 0)];
        [bezierPath addLineToPoint: CGPointMake(661.14, 0)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(628.44, 42.5)];
        [bezierPath addLineToPoint: CGPointMake(203.34, 42.5)];
        [bezierPath addCurveToPoint: CGPointMake(223.14, 435.4) controlPoint1: CGPointMake(140.14, 233.3) controlPoint2: CGPointMake(176.84, 322.8)];
        [bezierPath addCurveToPoint: CGPointMake(275.64, 981.5) controlPoint1: CGPointMake(272.64, 556) controlPoint2: CGPointMake(328.54, 692.2)];
        [bezierPath addLineToPoint: CGPointMake(562.54, 981.5)];
        [bezierPath addCurveToPoint: CGPointMake(571.43, 510.81) controlPoint1: CGPointMake(518.82, 749.69) controlPoint2: CGPointMake(539.08, 615.44)];
        [bezierPath addCurveToPoint: CGPointMake(597.41, 436.13) controlPoint1: CGPointMake(576.11, 486.36) controlPoint2: CGPointMake(585.43, 462.56)];
        [bezierPath addCurveToPoint: CGPointMake(602.34, 423) controlPoint1: CGPointMake(599.06, 431.73) controlPoint2: CGPointMake(600.7, 427.35)];
        [bezierPath addCurveToPoint: CGPointMake(628.44, 42.5) controlPoint1: CGPointMake(641.64, 318.2) controlPoint2: CGPointMake(675.74, 227.3)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];



        CGContextRestoreGState(context);
    }
}

+ (void)drawCocktailDrinklistIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* strokeColor = [strokeColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [strokeColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [strokeColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [strokeColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [strokeColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [strokeColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [strokeColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(830.37, 3.52)];
        [bezierPath addCurveToPoint: CGPointMake(853.37, 25.42) controlPoint1: CGPointMake(830.37, 3.52) controlPoint2: CGPointMake(853.37, 25.42)];
        [bezierPath addLineToPoint: CGPointMake(800.57, 80.62)];
        [bezierPath addCurveToPoint: CGPointMake(786.37, 134.92) controlPoint1: CGPointMake(806.67, 98.02) controlPoint2: CGPointMake(801.67, 119.52)];
        [bezierPath addCurveToPoint: CGPointMake(734.57, 149.62) controlPoint1: CGPointMake(771.67, 149.52) controlPoint2: CGPointMake(751.47, 154.42)];
        [bezierPath addLineToPoint: CGPointMake(681.57, 204.92)];
        [bezierPath addLineToPoint: CGPointMake(883.07, 204.92)];
        [bezierPath addCurveToPoint: CGPointMake(704.77, 391.02) controlPoint1: CGPointMake(883.07, 204.92) controlPoint2: CGPointMake(794.84, 297.01)];
        [bezierPath addLineToPoint: CGPointMake(811.37, 391.02)];
        [bezierPath addLineToPoint: CGPointMake(850.77, 349.82)];
        [bezierPath addCurveToPoint: CGPointMake(856.87, 316.42) controlPoint1: CGPointMake(845.17, 339.82) controlPoint2: CGPointMake(847.27, 326.02)];
        [bezierPath addCurveToPoint: CGPointMake(889.07, 309.82) controlPoint1: CGPointMake(866.07, 307.22) controlPoint2: CGPointMake(879.17, 305.02)];
        [bezierPath addLineToPoint: CGPointMake(917.17, 280.52)];
        [bezierPath addLineToPoint: CGPointMake(929.77, 292.52)];
        [bezierPath addLineToPoint: CGPointMake(900.77, 322.82)];
        [bezierPath addCurveToPoint: CGPointMake(892.97, 352.62) controlPoint1: CGPointMake(904.07, 332.42) controlPoint2: CGPointMake(901.37, 344.12)];
        [bezierPath addCurveToPoint: CGPointMake(864.57, 360.72) controlPoint1: CGPointMake(884.97, 360.62) controlPoint2: CGPointMake(873.87, 363.42)];
        [bezierPath addLineToPoint: CGPointMake(835.47, 391.02)];
        [bezierPath addLineToPoint: CGPointMake(945.97, 391.02)];
        [bezierPath addLineToPoint: CGPointMake(744.07, 601.82)];
        [bezierPath addLineToPoint: CGPointMake(744.07, 779.32)];
        [bezierPath addLineToPoint: CGPointMake(841.67, 821.62)];
        [bezierPath addCurveToPoint: CGPointMake(620.37, 821.62) controlPoint1: CGPointMake(730.47, 860.82) controlPoint2: CGPointMake(620.37, 821.62)];
        [bezierPath addLineToPoint: CGPointMake(717.97, 779.22)];
        [bezierPath addLineToPoint: CGPointMake(717.97, 601.72)];
        [bezierPath addCurveToPoint: CGPointMake(610.43, 489.49) controlPoint1: CGPointMake(717.97, 601.72) controlPoint2: CGPointMake(651.03, 531.86)];
        [bezierPath addCurveToPoint: CGPointMake(514.97, 589.12) controlPoint1: CGPointMake(555.88, 546.42) controlPoint2: CGPointMake(514.97, 589.12)];
        [bezierPath addLineToPoint: CGPointMake(514.97, 912.62)];
        [bezierPath addLineToPoint: CGPointMake(692.87, 989.82)];
        [bezierPath addCurveToPoint: CGPointMake(289.57, 989.82) controlPoint1: CGPointMake(490.17, 1061.32) controlPoint2: CGPointMake(289.57, 989.82)];
        [bezierPath addLineToPoint: CGPointMake(467.37, 912.62)];
        [bezierPath addLineToPoint: CGPointMake(467.37, 589.12)];
        [bezierPath addLineToPoint: CGPointMake(99.17, 205.02)];
        [bezierPath addLineToPoint: CGPointMake(637.47, 205.02)];
        [bezierPath addLineToPoint: CGPointMake(709.37, 129.92)];
        [bezierPath addCurveToPoint: CGPointMake(720.47, 69.02) controlPoint1: CGPointMake(699.17, 111.62) controlPoint2: CGPointMake(703.07, 86.52)];
        [bezierPath addCurveToPoint: CGPointMake(779.17, 57.02) controlPoint1: CGPointMake(737.27, 52.22) controlPoint2: CGPointMake(761.07, 48.22)];
        [bezierPath addLineToPoint: CGPointMake(830.37, 3.52)];
        [bezierPath addLineToPoint: CGPointMake(830.37, 3.52)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(729.07, 302.02)];
        [bezierPath addLineToPoint: CGPointMake(588.37, 302.02)];
        [bezierPath addLineToPoint: CGPointMake(488.47, 406.32)];
        [bezierPath addLineToPoint: CGPointMake(465.57, 384.42)];
        [bezierPath addLineToPoint: CGPointMake(544.37, 302.12)];
        [bezierPath addLineToPoint: CGPointMake(253.27, 302.12)];
        [bezierPath addLineToPoint: CGPointMake(491.07, 550.32)];
        [bezierPath addCurveToPoint: CGPointMake(565.44, 472.73) controlPoint1: CGPointMake(491.07, 550.32) controlPoint2: CGPointMake(524.04, 515.92)];
        [bezierPath addCurveToPoint: CGPointMake(729.07, 302.02) controlPoint1: CGPointMake(635.27, 399.88) controlPoint2: CGPointMake(729.07, 302.02)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(861.57, 444.32)];
        [bezierPath addLineToPoint: CGPointMake(784.37, 444.32)];
        [bezierPath addLineToPoint: CGPointMake(729.57, 501.52)];
        [bezierPath addLineToPoint: CGPointMake(716.97, 489.52)];
        [bezierPath addLineToPoint: CGPointMake(760.17, 444.32)];
        [bezierPath addLineToPoint: CGPointMake(653.71, 444.32)];
        [bezierPath addCurveToPoint: CGPointMake(627.08, 472.11) controlPoint1: CGPointMake(644.64, 453.78) controlPoint2: CGPointMake(635.74, 463.07)];
        [bezierPath addCurveToPoint: CGPointMake(730.97, 580.62) controlPoint1: CGPointMake(665.24, 511.97) controlPoint2: CGPointMake(730.97, 580.62)];
        [bezierPath addCurveToPoint: CGPointMake(771.69, 538.12) controlPoint1: CGPointMake(730.97, 580.62) controlPoint2: CGPointMake(749.02, 561.79)];
        [bezierPath addCurveToPoint: CGPointMake(861.57, 444.32) controlPoint1: CGPointMake(810.02, 498.12) controlPoint2: CGPointMake(861.57, 444.32)];
        [bezierPath closePath];
        [strokeColor setFill];
        [bezierPath fill];


        //// Rectangle Drawing



        CGContextRestoreGState(context);
    }
}

+ (void)drawFillerUpIconWithYPos: (CGFloat)yPos;
{
    //// General Declarations
    CGContextRef context __unused = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.878 green: 0.399 blue: 0.148 alpha: 1];

    //// Group 2
    {
        //// Glass Outline Drawing
        UIBezierPath* glassOutlinePath = UIBezierPath.bezierPath;
        [glassOutlinePath moveToPoint: CGPointMake(691.57, 1020.26)];
        [glassOutlinePath addLineToPoint: CGPointMake(302.57, 1020.26)];
        [glassOutlinePath addLineToPoint: CGPointMake(307.67, 994.96)];
        [glassOutlinePath addCurveToPoint: CGPointMake(262.37, 449.76) controlPoint1: CGPointMake(365.87, 701.76) controlPoint2: CGPointMake(310.87, 567.86)];
        [glassOutlinePath addCurveToPoint: CGPointMake(246.67, 13.96) controlPoint1: CGPointMake(215.77, 336.26) controlPoint2: CGPointMake(171.77, 229.16)];
        [glassOutlinePath addLineToPoint: CGPointMake(251.67, -0.24)];
        [glassOutlinePath addLineToPoint: CGPointMake(738.07, -0.24)];
        [glassOutlinePath addLineToPoint: CGPointMake(742.37, 15.36)];
        [glassOutlinePath addCurveToPoint: CGPointMake(719.27, 436.26) controlPoint1: CGPointMake(799.17, 223.26) controlPoint2: CGPointMake(760.37, 326.76)];
        [glassOutlinePath addCurveToPoint: CGPointMake(686.47, 994.86) controlPoint1: CGPointMake(674.87, 554.66) controlPoint2: CGPointMake(624.47, 688.86)];
        [glassOutlinePath addLineToPoint: CGPointMake(691.57, 1020.26)];
        [glassOutlinePath closePath];
        [glassOutlinePath moveToPoint: CGPointMake(353.97, 977.86)];
        [glassOutlinePath addLineToPoint: CGPointMake(639.87, 977.86)];
        [glassOutlinePath addCurveToPoint: CGPointMake(679.47, 421.36) controlPoint1: CGPointMake(583.27, 677.76) controlPoint2: CGPointMake(634.37, 541.76)];
        [glassOutlinePath addCurveToPoint: CGPointMake(705.47, 42.16) controlPoint1: CGPointMake(718.67, 316.96) controlPoint2: CGPointMake(752.67, 226.36)];
        [glassOutlinePath addLineToPoint: CGPointMake(281.87, 42.16)];
        [glassOutlinePath addCurveToPoint: CGPointMake(301.57, 433.66) controlPoint1: CGPointMake(218.87, 232.26) controlPoint2: CGPointMake(255.47, 321.46)];
        [glassOutlinePath addCurveToPoint: CGPointMake(353.97, 977.86) controlPoint1: CGPointMake(350.87, 553.86) controlPoint2: CGPointMake(406.67, 689.56)];
        [glassOutlinePath closePath];
        glassOutlinePath.miterLimit = 4;

        [color setFill];
        [glassOutlinePath fill];


        //// Group
        {

            //// Clip Filled Bezier
            UIBezierPath* filledBezierPath = UIBezierPath.bezierPath;
            [filledBezierPath moveToPoint: CGPointMake(737.68, 0)];
            [filledBezierPath addCurveToPoint: CGPointMake(741.98, 15.6) controlPoint1: CGPointMake(737.68, 0) controlPoint2: CGPointMake(741.98, 15.6)];
            [filledBezierPath addCurveToPoint: CGPointMake(718.88, 436.5) controlPoint1: CGPointMake(798.78, 223.5) controlPoint2: CGPointMake(759.98, 327)];
            [filledBezierPath addCurveToPoint: CGPointMake(686.08, 995.1) controlPoint1: CGPointMake(674.48, 554.9) controlPoint2: CGPointMake(624.08, 689.1)];
            [filledBezierPath addLineToPoint: CGPointMake(691.18, 1020.5)];
            [filledBezierPath addLineToPoint: CGPointMake(302.18, 1020.5)];
            [filledBezierPath addLineToPoint: CGPointMake(307.28, 995.2)];
            [filledBezierPath addCurveToPoint: CGPointMake(261.98, 450) controlPoint1: CGPointMake(365.48, 702) controlPoint2: CGPointMake(310.48, 568.1)];
            [filledBezierPath addCurveToPoint: CGPointMake(246.28, 14.2) controlPoint1: CGPointMake(215.38, 336.5) controlPoint2: CGPointMake(171.38, 229.4)];
            [filledBezierPath addLineToPoint: CGPointMake(251.28, 0)];
            [filledBezierPath addLineToPoint: CGPointMake(737.68, 0)];
            [filledBezierPath addLineToPoint: CGPointMake(737.68, 0)];
            [filledBezierPath closePath];
            [filledBezierPath addClip];


            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, yPos, 1024, 1024)];
            [SHStyleKit.myTintColorTransparent setFill];
            [rectanglePath fill];
        }
    }
}

+ (void)drawMapBubblePinFilledIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* myMapGradient1 = [UIColor colorWithRed: 0.846 green: 0.456 blue: 0.137 alpha: 1];
    UIColor* myMapGradient2 = [UIColor colorWithRed: 0.878 green: 0.378 blue: 0.151 alpha: 1];
    UIColor* myMapGradient3 = [UIColor colorWithRed: 0.887 green: 0.361 blue: 0.154 alpha: 1];
    UIColor* myMapPinShadow1 = [UIColor colorWithRed: 0.931 green: 0.931 blue: 0.936 alpha: 0.56];
    UIColor* myMapPinShadow2 = [UIColor colorWithRed: 0.586 green: 0.594 blue: 0.607 alpha: 0.56];

    //// Gradient Declarations
    CGFloat myMapPinGradientLocations[] = {0, 0.85, 1};
    CGGradientRef myMapPinGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)myMapGradient1.CGColor, (id)myMapGradient2.CGColor, (id)myMapGradient3.CGColor], myMapPinGradientLocations);
    CGFloat myMapPinShadowLocations[] = {0, 0.51, 1};
    CGGradientRef myMapPinShadow = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)myMapPinShadow1.CGColor, (id)myMapPinShadow2.CGColor, (id)myMapPinShadow1.CGColor], myMapPinShadowLocations);

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Shadow Drawing
        UIBezierPath* shadowPath = UIBezierPath.bezierPath;
        [shadowPath moveToPoint: CGPointMake(501.9, 936.8)];
        [shadowPath addCurveToPoint: CGPointMake(252.3, 952.3) controlPoint1: CGPointMake(501.9, 945.4) controlPoint2: CGPointMake(390.1, 952.3)];
        [shadowPath addCurveToPoint: CGPointMake(2.7, 936.8) controlPoint1: CGPointMake(114.4, 952.3) controlPoint2: CGPointMake(2.7, 945.4)];
        [shadowPath addCurveToPoint: CGPointMake(252.3, 921.3) controlPoint1: CGPointMake(2.7, 928.2) controlPoint2: CGPointMake(114.5, 921.3)];
        [shadowPath addCurveToPoint: CGPointMake(501.9, 936.8) controlPoint1: CGPointMake(390.1, 921.3) controlPoint2: CGPointMake(501.9, 928.3)];
        [shadowPath closePath];
        shadowPath.miterLimit = 4;

        CGContextSaveGState(context);
        [shadowPath addClip];
        CGContextDrawLinearGradient(context, myMapPinShadow,
            CGPointMake(2.7, 936.8),
            CGPointMake(501.9, 936.8),
            kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
        CGContextRestoreGState(context);


        //// Bubble Drawing
        UIBezierPath* bubblePath = UIBezierPath.bezierPath;
        [bubblePath moveToPoint: CGPointMake(574.5, 40)];
        [bubblePath addCurveToPoint: CGPointMake(130.6, 483.9) controlPoint1: CGPointMake(329.3, 40) controlPoint2: CGPointMake(130.6, 238.8)];
        [bubblePath addCurveToPoint: CGPointMake(275.5, 812) controlPoint1: CGPointMake(130.6, 613.9) controlPoint2: CGPointMake(186.4, 730.8)];
        [bubblePath addLineToPoint: CGPointMake(263.1, 938)];
        [bubblePath addLineToPoint: CGPointMake(382.2, 884.1)];
        [bubblePath addCurveToPoint: CGPointMake(574.6, 927.8) controlPoint1: CGPointMake(440.4, 912.2) controlPoint2: CGPointMake(505.7, 927.8)];
        [bubblePath addCurveToPoint: CGPointMake(1018.5, 483.9) controlPoint1: CGPointMake(819.8, 927.8) controlPoint2: CGPointMake(1018.5, 729)];
        [bubblePath addCurveToPoint: CGPointMake(574.5, 40) controlPoint1: CGPointMake(1018.5, 238.8) controlPoint2: CGPointMake(819.6, 40)];
        [bubblePath closePath];
        CGContextSaveGState(context);
        [bubblePath addClip];
        CGContextDrawLinearGradient(context, myMapPinGradient,
            CGPointMake(574.55, 40),
            CGPointMake(574.55, 938),
            kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
        CGContextRestoreGState(context);
        [SHStyleKit.myWhiteColor setStroke];
        bubblePath.lineWidth = 8;
        [bubblePath stroke];



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(myMapPinGradient);
    CGGradientRelease(myMapPinShadow);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawMapBubblePinEmptyIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* myMapPinShadow1 = [UIColor colorWithRed: 0.931 green: 0.931 blue: 0.936 alpha: 0.56];
    UIColor* myMapPinShadow2 = [UIColor colorWithRed: 0.586 green: 0.594 blue: 0.607 alpha: 0.56];

    //// Gradient Declarations
    CGFloat myMapPinShadowLocations[] = {0, 0.51, 1};
    CGGradientRef myMapPinShadow = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)myMapPinShadow1.CGColor, (id)myMapPinShadow2.CGColor, (id)myMapPinShadow1.CGColor], myMapPinShadowLocations);

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Shadow Drawing
        UIBezierPath* shadowPath = UIBezierPath.bezierPath;
        [shadowPath moveToPoint: CGPointMake(501.9, 936.8)];
        [shadowPath addCurveToPoint: CGPointMake(252.3, 952.3) controlPoint1: CGPointMake(501.9, 945.4) controlPoint2: CGPointMake(390.1, 952.3)];
        [shadowPath addCurveToPoint: CGPointMake(2.7, 936.8) controlPoint1: CGPointMake(114.4, 952.3) controlPoint2: CGPointMake(2.7, 945.4)];
        [shadowPath addCurveToPoint: CGPointMake(252.3, 921.3) controlPoint1: CGPointMake(2.7, 928.2) controlPoint2: CGPointMake(114.5, 921.3)];
        [shadowPath addCurveToPoint: CGPointMake(501.9, 936.8) controlPoint1: CGPointMake(390.1, 921.3) controlPoint2: CGPointMake(501.9, 928.3)];
        [shadowPath closePath];
        shadowPath.miterLimit = 4;

        CGContextSaveGState(context);
        [shadowPath addClip];
        CGContextDrawLinearGradient(context, myMapPinShadow,
            CGPointMake(2.7, 936.8),
            CGPointMake(501.9, 936.8),
            kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
        CGContextRestoreGState(context);


        //// Bubble Drawing
        UIBezierPath* bubblePath = UIBezierPath.bezierPath;
        [bubblePath moveToPoint: CGPointMake(574.5, 40)];
        [bubblePath addCurveToPoint: CGPointMake(130.6, 483.9) controlPoint1: CGPointMake(329.3, 40) controlPoint2: CGPointMake(130.6, 238.8)];
        [bubblePath addCurveToPoint: CGPointMake(275.5, 812) controlPoint1: CGPointMake(130.6, 613.9) controlPoint2: CGPointMake(186.4, 730.8)];
        [bubblePath addLineToPoint: CGPointMake(263.1, 938)];
        [bubblePath addLineToPoint: CGPointMake(382.2, 884.1)];
        [bubblePath addCurveToPoint: CGPointMake(574.6, 927.8) controlPoint1: CGPointMake(440.4, 912.2) controlPoint2: CGPointMake(505.7, 927.8)];
        [bubblePath addCurveToPoint: CGPointMake(1018.5, 483.9) controlPoint1: CGPointMake(819.8, 927.8) controlPoint2: CGPointMake(1018.5, 729)];
        [bubblePath addCurveToPoint: CGPointMake(574.5, 40) controlPoint1: CGPointMake(1018.5, 238.8) controlPoint2: CGPointMake(819.6, 40)];
        [bubblePath closePath];
        [SHStyleKit.myWhiteColor setFill];
        [bubblePath fill];
        [SHStyleKit.myTintColor setStroke];
        bubblePath.lineWidth = 8;
        [bubblePath stroke];



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(myMapPinShadow);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawGradientBackgroundWithWidth: (CGFloat)width height: (CGFloat)height scaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* myTintColorGradientColor1 = [UIColor colorWithRed: 0.918 green: 0.682 blue: 0.455 alpha: 1];
    UIColor* myTintColorGradientColor2 = [UIColor colorWithRed: 0.933 green: 0.627 blue: 0.518 alpha: 1];

    //// Gradient Declarations
    CGFloat myTintColorGradientLocations[] = {0, 1};
    CGGradientRef myTintColorGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)myTintColorGradientColor1.CGColor, (id)myTintColorGradientColor2.CGColor], myTintColorGradientLocations);

    //// Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, width, height)];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, myTintColorGradient, CGPointMake(160, -0), CGPointMake(160, 568), 0);
        CGContextRestoreGState(context);



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(myTintColorGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawTopBarBackgroundWithFillColorName: (NSString*)fillColorName;
{

    //// Variable Declarations
    UIColor* fillColor = [fillColorName isEqualToString: @"myTintColor"] ? SHStyleKit.myTintColor : [fillColorName isEqualToString: @"myTintColorTransparent"] ? SHStyleKit.myTintColorTransparent : [fillColorName isEqualToString: @"myTextColor"] ? SHStyleKit.myTextColor : [fillColorName isEqualToString: @"myWhiteColor"] ? SHStyleKit.myWhiteColor : [fillColorName isEqualToString: @"myWhiteColorTransparent"] ? SHStyleKit.myWhiteColorTransparent : [fillColorName isEqualToString: @"myBlackColor"] ? SHStyleKit.myBlackColor : [fillColorName isEqualToString: @"default"] ? SHStyleKit.myWhiteColor : SHStyleKit.myClearColor;

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 64)];
        [fillColor setFill];
        [rectanglePath fill];
    }
}

+ (void)drawTopBarWhiteShadowBackground;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat myWhiteShadowGradientLocations[] = {0, 1};
    CGGradientRef myWhiteShadowGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)SHStyleKit.myWhiteColorTransparent.CGColor, (id)SHStyleKit.myClearColor.CGColor], myWhiteShadowGradientLocations);

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 64)];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, myWhiteShadowGradient, CGPointMake(160, -0), CGPointMake(160, 64), 0);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(myWhiteShadowGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawBottomBarBlackShadowBackground;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat myDarkShadowGradientLocations[] = {0, 0.67, 1};
    CGGradientRef myDarkShadowGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)UIColor.blackColor.CGColor, (id)[UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 0.5].CGColor, (id)SHStyleKit.myClearColor.CGColor], myDarkShadowGradientLocations);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 64)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, myDarkShadowGradient, CGPointMake(160, 64), CGPointMake(160, -0), 0);
    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(myDarkShadowGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawMyPlaceholderWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Scaling Group
    {
        CGContextSaveGState(context);
        CGContextScaleCTM(context, scaleX, scaleY);



        //// Centering Group
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 1024, 1024)];
            [SHStyleKit.myTintColorDesaturated setFill];
            [rectanglePath fill];


            //// Bubble Drawing
            UIBezierPath* bubblePath = UIBezierPath.bezierPath;
            [bubblePath moveToPoint: CGPointMake(511.9, 63)];
            [bubblePath addCurveToPoint: CGPointMake(68, 506.9) controlPoint1: CGPointMake(266.7, 63) controlPoint2: CGPointMake(68, 261.8)];
            [bubblePath addCurveToPoint: CGPointMake(212.9, 835) controlPoint1: CGPointMake(68, 636.9) controlPoint2: CGPointMake(123.8, 753.8)];
            [bubblePath addLineToPoint: CGPointMake(200.5, 961)];
            [bubblePath addLineToPoint: CGPointMake(319.6, 907.1)];
            [bubblePath addCurveToPoint: CGPointMake(512, 950.8) controlPoint1: CGPointMake(377.8, 935.2) controlPoint2: CGPointMake(443.1, 950.8)];
            [bubblePath addCurveToPoint: CGPointMake(955.9, 506.9) controlPoint1: CGPointMake(757.2, 950.8) controlPoint2: CGPointMake(955.9, 752)];
            [bubblePath addCurveToPoint: CGPointMake(511.9, 63) controlPoint1: CGPointMake(955.9, 261.8) controlPoint2: CGPointMake(757, 63)];
            [bubblePath closePath];
            [SHStyleKit.myWhiteColorTransparent setFill];
            [bubblePath fill];
        }



        CGContextRestoreGState(context);
    }
}

#pragma mark Generated Images

+ (UIImage*)imageOfWineIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawWineIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfWineIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfWineIcon;
}

+ (UIImage*)imageOfSpecialsIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSpecialsIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSpecialsIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSpecialsIcon;
}

+ (UIImage*)imageOfSpotIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSpotIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSpotIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSpotIcon;
}

+ (UIImage*)imageOfCocktailIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawCocktailIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfCocktailIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfCocktailIcon;
}

+ (UIImage*)imageOfBeerIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawBeerIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfBeerIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfBeerIcon;
}

+ (UIImage*)imageOfNavigationArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName rotation: (CGFloat)rotation;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawNavigationArrowIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName rotation: rotation];
    UIImage* imageOfNavigationArrowIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfNavigationArrowIcon;
}

+ (UIImage*)imageOfSearchIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSearchIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSearchIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSearchIcon;
}

+ (UIImage*)imageOfSpotSideBarIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawSpotSideBarIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfSpotSideBarIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfSpotSideBarIcon;
}

+ (UIImage*)imageOfFeaturedListIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawFeaturedListIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfFeaturedListIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfFeaturedListIcon;
}

+ (UIImage*)imageOfArrowIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName fillColorName: (NSString*)fillColorName rotation: (CGFloat)rotation;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawArrowIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName fillColorName: fillColorName rotation: rotation];
    UIImage* imageOfArrowIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfArrowIcon;
}

+ (UIImage*)imageOfDrinksIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawDrinksIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfDrinksIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfDrinksIcon;
}

+ (UIImage*)imageOfOutlineIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawOutlineIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName];
    UIImage* imageOfOutlineIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfOutlineIcon;
}

+ (UIImage*)imageOfCheckMarkIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName fillColorName: (NSString*)fillColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawCheckMarkIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName fillColorName: fillColorName];
    UIImage* imageOfCheckMarkIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfCheckMarkIcon;
}

+ (UIImage*)imageOfThumbsUpIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY strokeColorName: (NSString*)strokeColorName fillColorName: (NSString*)fillColorName;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawThumbsUpIconWithScaleX: scaleX scaleY: scaleY strokeColorName: strokeColorName fillColorName: fillColorName];
    UIImage* imageOfThumbsUpIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfThumbsUpIcon;
}

+ (UIImage*)imageOfShareIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY color1Name: (NSString*)color1Name color2Name: (NSString*)color2Name color3Name: (NSString*)color3Name;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawShareIconWithScaleX: scaleX scaleY: scaleY color1Name: color1Name color2Name: color2Name color3Name: color3Name];
    UIImage* imageOfShareIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfShareIcon;
}

+ (UIImage*)imageOfMapBubblePinFilledIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawMapBubblePinFilledIconWithScaleX: scaleX scaleY: scaleY];
    UIImage* imageOfMapBubblePinFilledIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfMapBubblePinFilledIcon;
}

+ (UIImage*)imageOfMapBubblePinEmptyIconWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawMapBubblePinEmptyIconWithScaleX: scaleX scaleY: scaleY];
    UIImage* imageOfMapBubblePinEmptyIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfMapBubblePinEmptyIcon;
}

+ (UIImage*)imageOfGradientBackgroundWithWidth: (CGFloat)width height: (CGFloat)height scaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 568), NO, 0.0f);
    [SHStyleKit drawGradientBackgroundWithWidth: width height: height scaleX: scaleX scaleY: scaleY];
    UIImage* imageOfGradientBackground = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfGradientBackground;
}

+ (UIImage*)imageOfMyPlaceholderWithScaleX: (CGFloat)scaleX scaleY: (CGFloat)scaleY;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1024, 1024), NO, 0.0f);
    [SHStyleKit drawMyPlaceholderWithScaleX: scaleX scaleY: scaleY];
    UIImage* imageOfMyPlaceholder = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfMyPlaceholder;
}

@end
